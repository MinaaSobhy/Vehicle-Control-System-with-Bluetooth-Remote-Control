
CUERT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003054  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00003054  000030e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800094  00800094  0000311c  2**0
                  ALLOC
  3 .stab         00002dfc  00000000  00000000  0000311c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001020  00000000  00000000  00005f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000071e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aacc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ac2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aeb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b687  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 82 12 	call	0x2504	; 0x2504 <main>
      8a:	0c 94 28 18 	jmp	0x3050	; 0x3050 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e8       	ldi	r26, 0x84	; 132
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DCmotor_init>:
#include "DCmotor.h"


/* setting output pins for the motor and set an initializing value for them */
void DCmotor_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* configure pins (PB4 and PB5) as output pins */
	GPIO_setupPinDirection(DCmotor_PORTA,DCmotor_PINA, PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	65 e0       	ldi	r22, 0x05	; 5
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCmotor_PORTB,DCmotor_PINB, PIN_OUTPUT);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	64 e0       	ldi	r22, 0x04	; 4
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GPIO_setupPinDirection>


	/* Clear the two bits to stop the motor at the beginning */
	GPIO_writePin(DCmotor_PORTA,DCmotor_PINA, LOGIC_LOW);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	65 e0       	ldi	r22, 0x05	; 5
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
	GPIO_writePin(DCmotor_PORTB,DCmotor_PINB, LOGIC_LOW);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	64 e0       	ldi	r22, 0x04	; 4
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <DCmotor_info>:

/* setting the speed and the direction of the motor according to the input */
void DCmotor_info(uint8 speed,uint8 dirc)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <DCmotor_info+0x6>
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	8a 83       	std	Y+2, r24	; 0x02
     b8a:	6b 83       	std	Y+3, r22	; 0x03
	if (speed > 100 || speed < 0)
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	85 36       	cpi	r24, 0x65	; 101
     b90:	20 f5       	brcc	.+72     	; 0xbda <DCmotor_info+0x5e>
	else
	{	/*rotate the motor ACW if the input is 'F'
	 	  by setting mode: PINA:High , PINB:LOW
	 	  or rotate CW if the input is 'B'
	 	  by setting mode: PINA:LOW , PINB:HIGH*/
		if (dirc == 'F')
     b92:	8b 81       	ldd	r24, Y+3	; 0x03
     b94:	86 34       	cpi	r24, 0x46	; 70
     b96:	59 f4       	brne	.+22     	; 0xbae <DCmotor_info+0x32>
		{
			GPIO_writePin(DCmotor_PORTA,DCmotor_PINA, LOGIC_HIGH);
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	65 e0       	ldi	r22, 0x05	; 5
     b9c:	41 e0       	ldi	r20, 0x01	; 1
     b9e:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
			GPIO_writePin(DCmotor_PORTB,DCmotor_PINB, LOGIC_LOW);
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	64 e0       	ldi	r22, 0x04	; 4
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
     bac:	0d c0       	rjmp	.+26     	; 0xbc8 <DCmotor_info+0x4c>
		}
		else if (dirc=='B')
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	82 34       	cpi	r24, 0x42	; 66
     bb2:	51 f4       	brne	.+20     	; 0xbc8 <DCmotor_info+0x4c>
		{
			GPIO_writePin(DCmotor_PORTA,DCmotor_PINA, LOGIC_LOW);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	65 e0       	ldi	r22, 0x05	; 5
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
			GPIO_writePin(DCmotor_PORTB,DCmotor_PINB, LOGIC_HIGH);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	64 e0       	ldi	r22, 0x04	; 4
     bc2:	41 e0       	ldi	r20, 0x01	; 1
     bc4:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
		}

		/* convert the speed form percentage to bits according to the register size(256)*/
		uint8 speed_bit = speed * (256/100);
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	89 83       	std	Y+1, r24	; 0x01
		/* calling PWM function to generate the speed required by the motor */
		PWM_Timer0_Start(speed_bit);
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	0e 94 46 14 	call	0x288c	; 0x288c <PWM_Timer0_Start>
	}

}
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	00 d0       	rcall	.+0      	; 0xbec <GPIO_setupPinDirection+0x6>
     bec:	00 d0       	rcall	.+0      	; 0xbee <GPIO_setupPinDirection+0x8>
     bee:	0f 92       	push	r0
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	89 83       	std	Y+1, r24	; 0x01
     bf6:	6a 83       	std	Y+2, r22	; 0x02
     bf8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	88 30       	cpi	r24, 0x08	; 8
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <GPIO_setupPinDirection+0x1c>
     c00:	d5 c0       	rjmp	.+426    	; 0xdac <GPIO_setupPinDirection+0x1c6>
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	84 30       	cpi	r24, 0x04	; 4
     c06:	08 f0       	brcs	.+2      	; 0xc0a <GPIO_setupPinDirection+0x24>
     c08:	d1 c0       	rjmp	.+418    	; 0xdac <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	3d 83       	std	Y+5, r19	; 0x05
     c12:	2c 83       	std	Y+4, r18	; 0x04
     c14:	8c 81       	ldd	r24, Y+4	; 0x04
     c16:	9d 81       	ldd	r25, Y+5	; 0x05
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	91 05       	cpc	r25, r1
     c1c:	09 f4       	brne	.+2      	; 0xc20 <GPIO_setupPinDirection+0x3a>
     c1e:	43 c0       	rjmp	.+134    	; 0xca6 <GPIO_setupPinDirection+0xc0>
     c20:	2c 81       	ldd	r18, Y+4	; 0x04
     c22:	3d 81       	ldd	r19, Y+5	; 0x05
     c24:	22 30       	cpi	r18, 0x02	; 2
     c26:	31 05       	cpc	r19, r1
     c28:	2c f4       	brge	.+10     	; 0xc34 <GPIO_setupPinDirection+0x4e>
     c2a:	8c 81       	ldd	r24, Y+4	; 0x04
     c2c:	9d 81       	ldd	r25, Y+5	; 0x05
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	71 f0       	breq	.+28     	; 0xc4e <GPIO_setupPinDirection+0x68>
     c32:	bc c0       	rjmp	.+376    	; 0xdac <GPIO_setupPinDirection+0x1c6>
     c34:	2c 81       	ldd	r18, Y+4	; 0x04
     c36:	3d 81       	ldd	r19, Y+5	; 0x05
     c38:	22 30       	cpi	r18, 0x02	; 2
     c3a:	31 05       	cpc	r19, r1
     c3c:	09 f4       	brne	.+2      	; 0xc40 <GPIO_setupPinDirection+0x5a>
     c3e:	5f c0       	rjmp	.+190    	; 0xcfe <GPIO_setupPinDirection+0x118>
     c40:	8c 81       	ldd	r24, Y+4	; 0x04
     c42:	9d 81       	ldd	r25, Y+5	; 0x05
     c44:	83 30       	cpi	r24, 0x03	; 3
     c46:	91 05       	cpc	r25, r1
     c48:	09 f4       	brne	.+2      	; 0xc4c <GPIO_setupPinDirection+0x66>
     c4a:	85 c0       	rjmp	.+266    	; 0xd56 <GPIO_setupPinDirection+0x170>
     c4c:	af c0       	rjmp	.+350    	; 0xdac <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	a1 f4       	brne	.+40     	; 0xc7c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     c54:	aa e3       	ldi	r26, 0x3A	; 58
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	ea e3       	ldi	r30, 0x3A	; 58
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <GPIO_setupPinDirection+0x8c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <GPIO_setupPinDirection+0x88>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	98 c0       	rjmp	.+304    	; 0xdac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     c7c:	aa e3       	ldi	r26, 0x3A	; 58
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	ea e3       	ldi	r30, 0x3A	; 58
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <GPIO_setupPinDirection+0xb4>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <GPIO_setupPinDirection+0xb0>
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	83 c0       	rjmp	.+262    	; 0xdac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	a1 f4       	brne	.+40     	; 0xcd4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     cac:	a7 e3       	ldi	r26, 0x37	; 55
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e7 e3       	ldi	r30, 0x37	; 55
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <GPIO_setupPinDirection+0xe4>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <GPIO_setupPinDirection+0xe0>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	6c c0       	rjmp	.+216    	; 0xdac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     cd4:	a7 e3       	ldi	r26, 0x37	; 55
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e7 e3       	ldi	r30, 0x37	; 55
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <GPIO_setupPinDirection+0x10c>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <GPIO_setupPinDirection+0x108>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
     cfc:	57 c0       	rjmp	.+174    	; 0xdac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	a1 f4       	brne	.+40     	; 0xd2c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     d04:	a4 e3       	ldi	r26, 0x34	; 52
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e4 e3       	ldi	r30, 0x34	; 52
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <GPIO_setupPinDirection+0x13c>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <GPIO_setupPinDirection+0x138>
     d26:	84 2b       	or	r24, r20
     d28:	8c 93       	st	X, r24
     d2a:	40 c0       	rjmp	.+128    	; 0xdac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     d2c:	a4 e3       	ldi	r26, 0x34	; 52
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e4 e3       	ldi	r30, 0x34	; 52
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <GPIO_setupPinDirection+0x164>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <GPIO_setupPinDirection+0x160>
     d4e:	80 95       	com	r24
     d50:	84 23       	and	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	2b c0       	rjmp	.+86     	; 0xdac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	a1 f4       	brne	.+40     	; 0xd84 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     d5c:	a1 e3       	ldi	r26, 0x31	; 49
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e1 e3       	ldi	r30, 0x31	; 49
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <GPIO_setupPinDirection+0x194>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <GPIO_setupPinDirection+0x190>
     d7e:	84 2b       	or	r24, r20
     d80:	8c 93       	st	X, r24
     d82:	14 c0       	rjmp	.+40     	; 0xdac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     d84:	a1 e3       	ldi	r26, 0x31	; 49
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e1 e3       	ldi	r30, 0x31	; 49
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <GPIO_setupPinDirection+0x1bc>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <GPIO_setupPinDirection+0x1b8>
     da6:	80 95       	com	r24
     da8:	84 23       	and	r24, r20
     daa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <GPIO_writePin+0x6>
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <GPIO_writePin+0x8>
     dc4:	0f 92       	push	r0
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	6a 83       	std	Y+2, r22	; 0x02
     dce:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	88 30       	cpi	r24, 0x08	; 8
     dd4:	08 f0       	brcs	.+2      	; 0xdd8 <GPIO_writePin+0x1c>
     dd6:	d5 c0       	rjmp	.+426    	; 0xf82 <GPIO_writePin+0x1c6>
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	84 30       	cpi	r24, 0x04	; 4
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <GPIO_writePin+0x24>
     dde:	d1 c0       	rjmp	.+418    	; 0xf82 <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
	else
	{
		switch (port_num)
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	3d 83       	std	Y+5, r19	; 0x05
     de8:	2c 83       	std	Y+4, r18	; 0x04
     dea:	8c 81       	ldd	r24, Y+4	; 0x04
     dec:	9d 81       	ldd	r25, Y+5	; 0x05
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	91 05       	cpc	r25, r1
     df2:	09 f4       	brne	.+2      	; 0xdf6 <GPIO_writePin+0x3a>
     df4:	43 c0       	rjmp	.+134    	; 0xe7c <GPIO_writePin+0xc0>
     df6:	2c 81       	ldd	r18, Y+4	; 0x04
     df8:	3d 81       	ldd	r19, Y+5	; 0x05
     dfa:	22 30       	cpi	r18, 0x02	; 2
     dfc:	31 05       	cpc	r19, r1
     dfe:	2c f4       	brge	.+10     	; 0xe0a <GPIO_writePin+0x4e>
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
     e02:	9d 81       	ldd	r25, Y+5	; 0x05
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	71 f0       	breq	.+28     	; 0xe24 <GPIO_writePin+0x68>
     e08:	bc c0       	rjmp	.+376    	; 0xf82 <GPIO_writePin+0x1c6>
     e0a:	2c 81       	ldd	r18, Y+4	; 0x04
     e0c:	3d 81       	ldd	r19, Y+5	; 0x05
     e0e:	22 30       	cpi	r18, 0x02	; 2
     e10:	31 05       	cpc	r19, r1
     e12:	09 f4       	brne	.+2      	; 0xe16 <GPIO_writePin+0x5a>
     e14:	5f c0       	rjmp	.+190    	; 0xed4 <GPIO_writePin+0x118>
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
     e18:	9d 81       	ldd	r25, Y+5	; 0x05
     e1a:	83 30       	cpi	r24, 0x03	; 3
     e1c:	91 05       	cpc	r25, r1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <GPIO_writePin+0x66>
     e20:	85 c0       	rjmp	.+266    	; 0xf2c <GPIO_writePin+0x170>
     e22:	af c0       	rjmp	.+350    	; 0xf82 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if(value == LOGIC_HIGH)
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	a1 f4       	brne	.+40     	; 0xe52 <GPIO_writePin+0x96>
						{
							SET_BIT(PORTA,pin_num);
     e2a:	ab e3       	ldi	r26, 0x3B	; 59
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	eb e3       	ldi	r30, 0x3B	; 59
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <GPIO_writePin+0x8c>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <GPIO_writePin+0x88>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	98 c0       	rjmp	.+304    	; 0xf82 <GPIO_writePin+0x1c6>
						}
						else
						{
							CLEAR_BIT(PORTA,pin_num);
     e52:	ab e3       	ldi	r26, 0x3B	; 59
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	eb e3       	ldi	r30, 0x3B	; 59
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <GPIO_writePin+0xb4>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <GPIO_writePin+0xb0>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	83 c0       	rjmp	.+262    	; 0xf82 <GPIO_writePin+0x1c6>
						}
			break;
		case PORTB_ID :
					if(value == LOGIC_HIGH)
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	a1 f4       	brne	.+40     	; 0xeaa <GPIO_writePin+0xee>
								{
									SET_BIT(PORTB,pin_num);
     e82:	a8 e3       	ldi	r26, 0x38	; 56
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e8 e3       	ldi	r30, 0x38	; 56
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <GPIO_writePin+0xe4>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <GPIO_writePin+0xe0>
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	6c c0       	rjmp	.+216    	; 0xf82 <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTB,pin_num);
     eaa:	a8 e3       	ldi	r26, 0x38	; 56
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e8 e3       	ldi	r30, 0x38	; 56
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GPIO_writePin+0x10c>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <GPIO_writePin+0x108>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
     ed2:	57 c0       	rjmp	.+174    	; 0xf82 <GPIO_writePin+0x1c6>
								}
					break;
		case PORTC_ID :
					if(value == LOGIC_HIGH)
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	a1 f4       	brne	.+40     	; 0xf02 <GPIO_writePin+0x146>
								{
									SET_BIT(PORTC,pin_num);
     eda:	a5 e3       	ldi	r26, 0x35	; 53
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e5 e3       	ldi	r30, 0x35	; 53
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <GPIO_writePin+0x13c>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <GPIO_writePin+0x138>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	40 c0       	rjmp	.+128    	; 0xf82 <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTC,pin_num);
     f02:	a5 e3       	ldi	r26, 0x35	; 53
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e5 e3       	ldi	r30, 0x35	; 53
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <GPIO_writePin+0x164>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <GPIO_writePin+0x160>
     f24:	80 95       	com	r24
     f26:	84 23       	and	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	2b c0       	rjmp	.+86     	; 0xf82 <GPIO_writePin+0x1c6>
								}
					break;
		case PORTD_ID :
					if(value == LOGIC_HIGH)
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	a1 f4       	brne	.+40     	; 0xf5a <GPIO_writePin+0x19e>
								{
									SET_BIT(PORTD,pin_num);
     f32:	a2 e3       	ldi	r26, 0x32	; 50
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e2 e3       	ldi	r30, 0x32	; 50
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <GPIO_writePin+0x194>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <GPIO_writePin+0x190>
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	14 c0       	rjmp	.+40     	; 0xf82 <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTD,pin_num);
     f5a:	a2 e3       	ldi	r26, 0x32	; 50
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e2 e3       	ldi	r30, 0x32	; 50
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <GPIO_writePin+0x1bc>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <GPIO_writePin+0x1b8>
     f7c:	80 95       	com	r24
     f7e:	84 23       	and	r24, r20
     f80:	8c 93       	st	X, r24
								}
					break;
		}
	}

}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <GPIO_readPin+0x6>
     f98:	00 d0       	rcall	.+0      	; 0xf9a <GPIO_readPin+0x8>
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	8a 83       	std	Y+2, r24	; 0x02
     fa2:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
     fa4:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	88 30       	cpi	r24, 0x08	; 8
     faa:	08 f0       	brcs	.+2      	; 0xfae <GPIO_readPin+0x1c>
     fac:	84 c0       	rjmp	.+264    	; 0x10b6 <GPIO_readPin+0x124>
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	84 30       	cpi	r24, 0x04	; 4
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <GPIO_readPin+0x24>
     fb4:	80 c0       	rjmp	.+256    	; 0x10b6 <GPIO_readPin+0x124>
			{
				/* Do nothing */
			}
	else
	{
		switch(port_num)
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	3d 83       	std	Y+5, r19	; 0x05
     fbe:	2c 83       	std	Y+4, r18	; 0x04
     fc0:	4c 81       	ldd	r20, Y+4	; 0x04
     fc2:	5d 81       	ldd	r21, Y+5	; 0x05
     fc4:	41 30       	cpi	r20, 0x01	; 1
     fc6:	51 05       	cpc	r21, r1
     fc8:	79 f1       	breq	.+94     	; 0x1028 <GPIO_readPin+0x96>
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	9d 81       	ldd	r25, Y+5	; 0x05
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	91 05       	cpc	r25, r1
     fd2:	34 f4       	brge	.+12     	; 0xfe0 <GPIO_readPin+0x4e>
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	21 15       	cp	r18, r1
     fda:	31 05       	cpc	r19, r1
     fdc:	69 f0       	breq	.+26     	; 0xff8 <GPIO_readPin+0x66>
     fde:	6b c0       	rjmp	.+214    	; 0x10b6 <GPIO_readPin+0x124>
     fe0:	4c 81       	ldd	r20, Y+4	; 0x04
     fe2:	5d 81       	ldd	r21, Y+5	; 0x05
     fe4:	42 30       	cpi	r20, 0x02	; 2
     fe6:	51 05       	cpc	r21, r1
     fe8:	b9 f1       	breq	.+110    	; 0x1058 <GPIO_readPin+0xc6>
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	9d 81       	ldd	r25, Y+5	; 0x05
     fee:	83 30       	cpi	r24, 0x03	; 3
     ff0:	91 05       	cpc	r25, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <GPIO_readPin+0x64>
     ff4:	49 c0       	rjmp	.+146    	; 0x1088 <GPIO_readPin+0xf6>
     ff6:	5f c0       	rjmp	.+190    	; 0x10b6 <GPIO_readPin+0x124>
		{
		case PORTA_ID : if(BIT_IS_SET(PINA,pin_num))
     ff8:	e9 e3       	ldi	r30, 0x39	; 57
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	a9 01       	movw	r20, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <GPIO_readPin+0x7e>
    100c:	55 95       	asr	r21
    100e:	47 95       	ror	r20
    1010:	8a 95       	dec	r24
    1012:	e2 f7       	brpl	.-8      	; 0x100c <GPIO_readPin+0x7a>
    1014:	ca 01       	movw	r24, r20
    1016:	81 70       	andi	r24, 0x01	; 1
    1018:	90 70       	andi	r25, 0x00	; 0
    101a:	88 23       	and	r24, r24
    101c:	19 f0       	breq	.+6      	; 0x1024 <GPIO_readPin+0x92>
		{
			pin_value = LOGIC_HIGH ;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	49 c0       	rjmp	.+146    	; 0x10b6 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1024:	19 82       	std	Y+1, r1	; 0x01
    1026:	47 c0       	rjmp	.+142    	; 0x10b6 <GPIO_readPin+0x124>
		}
		break;
		case PORTB_ID : if(BIT_IS_SET(PINB,pin_num))
    1028:	e6 e3       	ldi	r30, 0x36	; 54
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	a9 01       	movw	r20, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <GPIO_readPin+0xae>
    103c:	55 95       	asr	r21
    103e:	47 95       	ror	r20
    1040:	8a 95       	dec	r24
    1042:	e2 f7       	brpl	.-8      	; 0x103c <GPIO_readPin+0xaa>
    1044:	ca 01       	movw	r24, r20
    1046:	81 70       	andi	r24, 0x01	; 1
    1048:	90 70       	andi	r25, 0x00	; 0
    104a:	88 23       	and	r24, r24
    104c:	19 f0       	breq	.+6      	; 0x1054 <GPIO_readPin+0xc2>
		{
			pin_value = LOGIC_HIGH ;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	31 c0       	rjmp	.+98     	; 0x10b6 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1054:	19 82       	std	Y+1, r1	; 0x01
    1056:	2f c0       	rjmp	.+94     	; 0x10b6 <GPIO_readPin+0x124>
		}
		break;
		case PORTC_ID : if(BIT_IS_SET(PINC,pin_num))
    1058:	e3 e3       	ldi	r30, 0x33	; 51
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a9 01       	movw	r20, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <GPIO_readPin+0xde>
    106c:	55 95       	asr	r21
    106e:	47 95       	ror	r20
    1070:	8a 95       	dec	r24
    1072:	e2 f7       	brpl	.-8      	; 0x106c <GPIO_readPin+0xda>
    1074:	ca 01       	movw	r24, r20
    1076:	81 70       	andi	r24, 0x01	; 1
    1078:	90 70       	andi	r25, 0x00	; 0
    107a:	88 23       	and	r24, r24
    107c:	19 f0       	breq	.+6      	; 0x1084 <GPIO_readPin+0xf2>
		{
			pin_value = LOGIC_HIGH ;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	19 c0       	rjmp	.+50     	; 0x10b6 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    1084:	19 82       	std	Y+1, r1	; 0x01
    1086:	17 c0       	rjmp	.+46     	; 0x10b6 <GPIO_readPin+0x124>
		}
		break;

		case PORTD_ID : if(BIT_IS_SET(PIND,pin_num))
    1088:	e0 e3       	ldi	r30, 0x30	; 48
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a9 01       	movw	r20, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <GPIO_readPin+0x10e>
    109c:	55 95       	asr	r21
    109e:	47 95       	ror	r20
    10a0:	8a 95       	dec	r24
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <GPIO_readPin+0x10a>
    10a4:	ca 01       	movw	r24, r20
    10a6:	81 70       	andi	r24, 0x01	; 1
    10a8:	90 70       	andi	r25, 0x00	; 0
    10aa:	88 23       	and	r24, r24
    10ac:	19 f0       	breq	.+6      	; 0x10b4 <GPIO_readPin+0x122>
		{
			pin_value = LOGIC_HIGH ;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    10b4:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
		}
	}
    return pin_value ;
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <GPIO_setupPortDirection+0x6>
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <GPIO_setupPortDirection+0x8>
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	84 30       	cpi	r24, 0x04	; 4
    10dc:	90 f5       	brcc	.+100    	; 0x1142 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3c 83       	std	Y+4, r19	; 0x04
    10e6:	2b 83       	std	Y+3, r18	; 0x03
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	d1 f0       	breq	.+52     	; 0x1126 <GPIO_setupPortDirection+0x5e>
    10f2:	2b 81       	ldd	r18, Y+3	; 0x03
    10f4:	3c 81       	ldd	r19, Y+4	; 0x04
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	2c f4       	brge	.+10     	; 0x1106 <GPIO_setupPortDirection+0x3e>
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	61 f0       	breq	.+24     	; 0x111c <GPIO_setupPortDirection+0x54>
    1104:	1e c0       	rjmp	.+60     	; 0x1142 <GPIO_setupPortDirection+0x7a>
    1106:	2b 81       	ldd	r18, Y+3	; 0x03
    1108:	3c 81       	ldd	r19, Y+4	; 0x04
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	81 f0       	breq	.+32     	; 0x1130 <GPIO_setupPortDirection+0x68>
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	91 05       	cpc	r25, r1
    1118:	81 f0       	breq	.+32     	; 0x113a <GPIO_setupPortDirection+0x72>
    111a:	13 c0       	rjmp	.+38     	; 0x1142 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    111c:	ea e3       	ldi	r30, 0x3A	; 58
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	80 83       	st	Z, r24
    1124:	0e c0       	rjmp	.+28     	; 0x1142 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1126:	e7 e3       	ldi	r30, 0x37	; 55
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	80 83       	st	Z, r24
    112e:	09 c0       	rjmp	.+18     	; 0x1142 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1130:	e4 e3       	ldi	r30, 0x34	; 52
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	80 83       	st	Z, r24
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    113a:	e1 e3       	ldi	r30, 0x31	; 49
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	80 83       	st	Z, r24
			break;
		}
	}
}
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num , uint8 value)
{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <GPIO_writePort+0x6>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <GPIO_writePort+0x8>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	84 30       	cpi	r24, 0x04	; 4
    1164:	90 f5       	brcc	.+100    	; 0x11ca <GPIO_writePort+0x7a>
		{
			/* Do Nothing */
		}
	else
	{
	  switch (port_num)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	3c 83       	std	Y+4, r19	; 0x04
    116e:	2b 83       	std	Y+3, r18	; 0x03
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	91 05       	cpc	r25, r1
    1178:	d1 f0       	breq	.+52     	; 0x11ae <GPIO_writePort+0x5e>
    117a:	2b 81       	ldd	r18, Y+3	; 0x03
    117c:	3c 81       	ldd	r19, Y+4	; 0x04
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	2c f4       	brge	.+10     	; 0x118e <GPIO_writePort+0x3e>
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	61 f0       	breq	.+24     	; 0x11a4 <GPIO_writePort+0x54>
    118c:	1e c0       	rjmp	.+60     	; 0x11ca <GPIO_writePort+0x7a>
    118e:	2b 81       	ldd	r18, Y+3	; 0x03
    1190:	3c 81       	ldd	r19, Y+4	; 0x04
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	81 f0       	breq	.+32     	; 0x11b8 <GPIO_writePort+0x68>
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	91 05       	cpc	r25, r1
    11a0:	81 f0       	breq	.+32     	; 0x11c2 <GPIO_writePort+0x72>
    11a2:	13 c0       	rjmp	.+38     	; 0x11ca <GPIO_writePort+0x7a>
	  {
	  case PORTA_ID : PORTA = value;
    11a4:	eb e3       	ldi	r30, 0x3B	; 59
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	80 83       	st	Z, r24
    11ac:	0e c0       	rjmp	.+28     	; 0x11ca <GPIO_writePort+0x7a>
	  break;
	  case PORTB_ID : PORTB = value;
    11ae:	e8 e3       	ldi	r30, 0x38	; 56
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	80 83       	st	Z, r24
    11b6:	09 c0       	rjmp	.+18     	; 0x11ca <GPIO_writePort+0x7a>
	  break;
	  case PORTC_ID : PORTC = value;
    11b8:	e5 e3       	ldi	r30, 0x35	; 53
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	80 83       	st	Z, r24
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <GPIO_writePort+0x7a>
	  break;
	  case PORTD_ID : PORTD = value;
    11c2:	e2 e3       	ldi	r30, 0x32	; 50
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	80 83       	st	Z, r24
	  break;

	  }
	}
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <GPIO_readPort+0x6>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <GPIO_readPort+0x8>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    11e6:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS))
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	84 30       	cpi	r24, 0x04	; 4
    11ec:	90 f5       	brcc	.+100    	; 0x1252 <GPIO_readPort+0x7a>
				/* Do nothing */
			}

	else
	{
		switch (port_num)
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3c 83       	std	Y+4, r19	; 0x04
    11f6:	2b 83       	std	Y+3, r18	; 0x03
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	d1 f0       	breq	.+52     	; 0x1236 <GPIO_readPort+0x5e>
    1202:	2b 81       	ldd	r18, Y+3	; 0x03
    1204:	3c 81       	ldd	r19, Y+4	; 0x04
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	2c f4       	brge	.+10     	; 0x1216 <GPIO_readPort+0x3e>
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	61 f0       	breq	.+24     	; 0x122c <GPIO_readPort+0x54>
    1214:	1e c0       	rjmp	.+60     	; 0x1252 <GPIO_readPort+0x7a>
    1216:	2b 81       	ldd	r18, Y+3	; 0x03
    1218:	3c 81       	ldd	r19, Y+4	; 0x04
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	81 f0       	breq	.+32     	; 0x1240 <GPIO_readPort+0x68>
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	91 05       	cpc	r25, r1
    1228:	81 f0       	breq	.+32     	; 0x124a <GPIO_readPort+0x72>
    122a:	13 c0       	rjmp	.+38     	; 0x1252 <GPIO_readPort+0x7a>
		{
		case PORTA_ID : value = PINA;
    122c:	e9 e3       	ldi	r30, 0x39	; 57
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	0e c0       	rjmp	.+28     	; 0x1252 <GPIO_readPort+0x7a>
		break;
		case PORTB_ID : value = PINB;
    1236:	e6 e3       	ldi	r30, 0x36	; 54
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <GPIO_readPort+0x7a>
		break;
		case PORTC_ID : value = PINC;
    1240:	e3 e3       	ldi	r30, 0x33	; 51
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <GPIO_readPort+0x7a>
		break;
		case PORTD_ID : value = PIND;
    124a:	e0 e3       	ldi	r30, 0x30	; 48
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	89 83       	std	Y+1, r24	; 0x01
		break;
		}
	}
  return value ;
    1252:	89 81       	ldd	r24, Y+1	; 0x01
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    126a:	83 e0       	ldi	r24, 0x03	; 3
    126c:	65 e0       	ldi	r22, 0x05	; 5
    126e:	41 e0       	ldi	r20, 0x01	; 1
    1270:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1274:	83 e0       	ldi	r24, 0x03	; 3
    1276:	66 e0       	ldi	r22, 0x06	; 6
    1278:	41 e0       	ldi	r20, 0x01	; 1
    127a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	67 e0       	ldi	r22, 0x07	; 7
    1282:	41 e0       	ldi	r20, 0x01	; 1
    1284:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GPIO_setupPinDirection>

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,PIN_OUTPUT);
    1288:	82 e0       	ldi	r24, 0x02	; 2
    128a:	64 e0       	ldi	r22, 0x04	; 4
    128c:	41 e0       	ldi	r20, 0x01	; 1
    128e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,PIN_OUTPUT);
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	65 e0       	ldi	r22, 0x05	; 5
    1296:	41 e0       	ldi	r20, 0x01	; 1
    1298:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	66 e0       	ldi	r22, 0x06	; 6
    12a0:	41 e0       	ldi	r20, 0x01	; 1
    12a2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
    12a6:	82 e0       	ldi	r24, 0x02	; 2
    12a8:	67 e0       	ldi	r22, 0x07	; 7
    12aa:	41 e0       	ldi	r20, 0x01	; 1
    12ac:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_GO_TO_HOME);
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	0e 94 67 09 	call	0x12ce	; 0x12ce <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    12b6:	88 e2       	ldi	r24, 0x28	; 40
    12b8:	0e 94 67 09 	call	0x12ce	; 0x12ce <LCD_sendCommand>
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    12bc:	8c e0       	ldi	r24, 0x0C	; 12
    12be:	0e 94 67 09 	call	0x12ce	; 0x12ce <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	0e 94 67 09 	call	0x12ce	; 0x12ce <LCD_sendCommand>
}
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	c4 56       	subi	r28, 0x64	; 100
    12dc:	d0 40       	sbci	r29, 0x00	; 0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	fe 01       	movw	r30, r28
    12ea:	ec 59       	subi	r30, 0x9C	; 156
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    12f0:	fe 01       	movw	r30, r28
    12f2:	ed 59       	subi	r30, 0x9D	; 157
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    12f8:	83 e0       	ldi	r24, 0x03	; 3
    12fa:	65 e0       	ldi	r22, 0x05	; 5
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	66 e0       	ldi	r22, 0x06	; 6
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
    130c:	fe 01       	movw	r30, r28
    130e:	e1 5a       	subi	r30, 0xA1	; 161
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	a0 e8       	ldi	r26, 0x80	; 128
    1318:	bf e3       	ldi	r27, 0x3F	; 63
    131a:	80 83       	st	Z, r24
    131c:	91 83       	std	Z+1, r25	; 0x01
    131e:	a2 83       	std	Z+2, r26	; 0x02
    1320:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1322:	8e 01       	movw	r16, r28
    1324:	05 5a       	subi	r16, 0xA5	; 165
    1326:	1f 4f       	sbci	r17, 0xFF	; 255
    1328:	fe 01       	movw	r30, r28
    132a:	e1 5a       	subi	r30, 0xA1	; 161
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	60 81       	ld	r22, Z
    1330:	71 81       	ldd	r23, Z+1	; 0x01
    1332:	82 81       	ldd	r24, Z+2	; 0x02
    1334:	93 81       	ldd	r25, Z+3	; 0x03
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	4a e7       	ldi	r20, 0x7A	; 122
    133c:	53 e4       	ldi	r21, 0x43	; 67
    133e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	f8 01       	movw	r30, r16
    1348:	80 83       	st	Z, r24
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	a2 83       	std	Z+2, r26	; 0x02
    134e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1350:	fe 01       	movw	r30, r28
    1352:	e5 5a       	subi	r30, 0xA5	; 165
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	60 81       	ld	r22, Z
    1358:	71 81       	ldd	r23, Z+1	; 0x01
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	93 81       	ldd	r25, Z+3	; 0x03
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e8       	ldi	r20, 0x80	; 128
    1364:	5f e3       	ldi	r21, 0x3F	; 63
    1366:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    136a:	88 23       	and	r24, r24
    136c:	44 f4       	brge	.+16     	; 0x137e <LCD_sendCommand+0xb0>
		__ticks = 1;
    136e:	fe 01       	movw	r30, r28
    1370:	e7 5a       	subi	r30, 0xA7	; 167
    1372:	ff 4f       	sbci	r31, 0xFF	; 255
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	80 83       	st	Z, r24
    137c:	64 c0       	rjmp	.+200    	; 0x1446 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    137e:	fe 01       	movw	r30, r28
    1380:	e5 5a       	subi	r30, 0xA5	; 165
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	60 81       	ld	r22, Z
    1386:	71 81       	ldd	r23, Z+1	; 0x01
    1388:	82 81       	ldd	r24, Z+2	; 0x02
    138a:	93 81       	ldd	r25, Z+3	; 0x03
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	3f ef       	ldi	r19, 0xFF	; 255
    1390:	4f e7       	ldi	r20, 0x7F	; 127
    1392:	57 e4       	ldi	r21, 0x47	; 71
    1394:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1398:	18 16       	cp	r1, r24
    139a:	0c f0       	brlt	.+2      	; 0x139e <LCD_sendCommand+0xd0>
    139c:	43 c0       	rjmp	.+134    	; 0x1424 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139e:	fe 01       	movw	r30, r28
    13a0:	e1 5a       	subi	r30, 0xA1	; 161
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	60 81       	ld	r22, Z
    13a6:	71 81       	ldd	r23, Z+1	; 0x01
    13a8:	82 81       	ldd	r24, Z+2	; 0x02
    13aa:	93 81       	ldd	r25, Z+3	; 0x03
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e2       	ldi	r20, 0x20	; 32
    13b2:	51 e4       	ldi	r21, 0x41	; 65
    13b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	8e 01       	movw	r16, r28
    13be:	07 5a       	subi	r16, 0xA7	; 167
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
    13c2:	bc 01       	movw	r22, r24
    13c4:	cd 01       	movw	r24, r26
    13c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	f8 01       	movw	r30, r16
    13d0:	91 83       	std	Z+1, r25	; 0x01
    13d2:	80 83       	st	Z, r24
    13d4:	1f c0       	rjmp	.+62     	; 0x1414 <LCD_sendCommand+0x146>
    13d6:	fe 01       	movw	r30, r28
    13d8:	e9 5a       	subi	r30, 0xA9	; 169
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	89 e1       	ldi	r24, 0x19	; 25
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13e4:	fe 01       	movw	r30, r28
    13e6:	e9 5a       	subi	r30, 0xA9	; 169
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	80 81       	ld	r24, Z
    13ec:	91 81       	ldd	r25, Z+1	; 0x01
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <LCD_sendCommand+0x120>
    13f2:	fe 01       	movw	r30, r28
    13f4:	e9 5a       	subi	r30, 0xA9	; 169
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	91 83       	std	Z+1, r25	; 0x01
    13fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fc:	de 01       	movw	r26, r28
    13fe:	a7 5a       	subi	r26, 0xA7	; 167
    1400:	bf 4f       	sbci	r27, 0xFF	; 255
    1402:	fe 01       	movw	r30, r28
    1404:	e7 5a       	subi	r30, 0xA7	; 167
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	80 81       	ld	r24, Z
    140a:	91 81       	ldd	r25, Z+1	; 0x01
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	11 96       	adiw	r26, 0x01	; 1
    1410:	9c 93       	st	X, r25
    1412:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1414:	fe 01       	movw	r30, r28
    1416:	e7 5a       	subi	r30, 0xA7	; 167
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	80 81       	ld	r24, Z
    141c:	91 81       	ldd	r25, Z+1	; 0x01
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	d1 f6       	brne	.-76     	; 0x13d6 <LCD_sendCommand+0x108>
    1422:	27 c0       	rjmp	.+78     	; 0x1472 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1424:	8e 01       	movw	r16, r28
    1426:	07 5a       	subi	r16, 0xA7	; 167
    1428:	1f 4f       	sbci	r17, 0xFF	; 255
    142a:	fe 01       	movw	r30, r28
    142c:	e5 5a       	subi	r30, 0xA5	; 165
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	60 81       	ld	r22, Z
    1432:	71 81       	ldd	r23, Z+1	; 0x01
    1434:	82 81       	ldd	r24, Z+2	; 0x02
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	f8 01       	movw	r30, r16
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	80 83       	st	Z, r24
    1446:	de 01       	movw	r26, r28
    1448:	ab 5a       	subi	r26, 0xAB	; 171
    144a:	bf 4f       	sbci	r27, 0xFF	; 255
    144c:	fe 01       	movw	r30, r28
    144e:	e7 5a       	subi	r30, 0xA7	; 167
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	8d 93       	st	X+, r24
    1458:	9c 93       	st	X, r25
    145a:	fe 01       	movw	r30, r28
    145c:	eb 5a       	subi	r30, 0xAB	; 171
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	80 81       	ld	r24, Z
    1462:	91 81       	ldd	r25, Z+1	; 0x01
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <LCD_sendCommand+0x196>
    1468:	fe 01       	movw	r30, r28
    146a:	eb 5a       	subi	r30, 0xAB	; 171
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1472:	83 e0       	ldi	r24, 0x03	; 3
    1474:	67 e0       	ldi	r22, 0x07	; 7
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
    147c:	fe 01       	movw	r30, r28
    147e:	ef 5a       	subi	r30, 0xAF	; 175
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a0 e8       	ldi	r26, 0x80	; 128
    1488:	bf e3       	ldi	r27, 0x3F	; 63
    148a:	80 83       	st	Z, r24
    148c:	91 83       	std	Z+1, r25	; 0x01
    148e:	a2 83       	std	Z+2, r26	; 0x02
    1490:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1492:	8e 01       	movw	r16, r28
    1494:	03 5b       	subi	r16, 0xB3	; 179
    1496:	1f 4f       	sbci	r17, 0xFF	; 255
    1498:	fe 01       	movw	r30, r28
    149a:	ef 5a       	subi	r30, 0xAF	; 175
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	60 81       	ld	r22, Z
    14a0:	71 81       	ldd	r23, Z+1	; 0x01
    14a2:	82 81       	ldd	r24, Z+2	; 0x02
    14a4:	93 81       	ldd	r25, Z+3	; 0x03
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	4a e7       	ldi	r20, 0x7A	; 122
    14ac:	53 e4       	ldi	r21, 0x43	; 67
    14ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	f8 01       	movw	r30, r16
    14b8:	80 83       	st	Z, r24
    14ba:	91 83       	std	Z+1, r25	; 0x01
    14bc:	a2 83       	std	Z+2, r26	; 0x02
    14be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14c0:	fe 01       	movw	r30, r28
    14c2:	e3 5b       	subi	r30, 0xB3	; 179
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	60 81       	ld	r22, Z
    14c8:	71 81       	ldd	r23, Z+1	; 0x01
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e8       	ldi	r20, 0x80	; 128
    14d4:	5f e3       	ldi	r21, 0x3F	; 63
    14d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14da:	88 23       	and	r24, r24
    14dc:	44 f4       	brge	.+16     	; 0x14ee <LCD_sendCommand+0x220>
		__ticks = 1;
    14de:	fe 01       	movw	r30, r28
    14e0:	e5 5b       	subi	r30, 0xB5	; 181
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	91 83       	std	Z+1, r25	; 0x01
    14ea:	80 83       	st	Z, r24
    14ec:	64 c0       	rjmp	.+200    	; 0x15b6 <LCD_sendCommand+0x2e8>
	else if (__tmp > 65535)
    14ee:	fe 01       	movw	r30, r28
    14f0:	e3 5b       	subi	r30, 0xB3	; 179
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	60 81       	ld	r22, Z
    14f6:	71 81       	ldd	r23, Z+1	; 0x01
    14f8:	82 81       	ldd	r24, Z+2	; 0x02
    14fa:	93 81       	ldd	r25, Z+3	; 0x03
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	3f ef       	ldi	r19, 0xFF	; 255
    1500:	4f e7       	ldi	r20, 0x7F	; 127
    1502:	57 e4       	ldi	r21, 0x47	; 71
    1504:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1508:	18 16       	cp	r1, r24
    150a:	0c f0       	brlt	.+2      	; 0x150e <LCD_sendCommand+0x240>
    150c:	43 c0       	rjmp	.+134    	; 0x1594 <LCD_sendCommand+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	fe 01       	movw	r30, r28
    1510:	ef 5a       	subi	r30, 0xAF	; 175
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	60 81       	ld	r22, Z
    1516:	71 81       	ldd	r23, Z+1	; 0x01
    1518:	82 81       	ldd	r24, Z+2	; 0x02
    151a:	93 81       	ldd	r25, Z+3	; 0x03
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e2       	ldi	r20, 0x20	; 32
    1522:	51 e4       	ldi	r21, 0x41	; 65
    1524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	8e 01       	movw	r16, r28
    152e:	05 5b       	subi	r16, 0xB5	; 181
    1530:	1f 4f       	sbci	r17, 0xFF	; 255
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	f8 01       	movw	r30, r16
    1540:	91 83       	std	Z+1, r25	; 0x01
    1542:	80 83       	st	Z, r24
    1544:	1f c0       	rjmp	.+62     	; 0x1584 <LCD_sendCommand+0x2b6>
    1546:	fe 01       	movw	r30, r28
    1548:	e7 5b       	subi	r30, 0xB7	; 183
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	89 e1       	ldi	r24, 0x19	; 25
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	91 83       	std	Z+1, r25	; 0x01
    1552:	80 83       	st	Z, r24
    1554:	fe 01       	movw	r30, r28
    1556:	e7 5b       	subi	r30, 0xB7	; 183
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	80 81       	ld	r24, Z
    155c:	91 81       	ldd	r25, Z+1	; 0x01
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <LCD_sendCommand+0x290>
    1562:	fe 01       	movw	r30, r28
    1564:	e7 5b       	subi	r30, 0xB7	; 183
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	91 83       	std	Z+1, r25	; 0x01
    156a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156c:	de 01       	movw	r26, r28
    156e:	a5 5b       	subi	r26, 0xB5	; 181
    1570:	bf 4f       	sbci	r27, 0xFF	; 255
    1572:	fe 01       	movw	r30, r28
    1574:	e5 5b       	subi	r30, 0xB5	; 181
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	80 81       	ld	r24, Z
    157a:	91 81       	ldd	r25, Z+1	; 0x01
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	11 96       	adiw	r26, 0x01	; 1
    1580:	9c 93       	st	X, r25
    1582:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1584:	fe 01       	movw	r30, r28
    1586:	e5 5b       	subi	r30, 0xB5	; 181
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	80 81       	ld	r24, Z
    158c:	91 81       	ldd	r25, Z+1	; 0x01
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	d1 f6       	brne	.-76     	; 0x1546 <LCD_sendCommand+0x278>
    1592:	27 c0       	rjmp	.+78     	; 0x15e2 <LCD_sendCommand+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1594:	8e 01       	movw	r16, r28
    1596:	05 5b       	subi	r16, 0xB5	; 181
    1598:	1f 4f       	sbci	r17, 0xFF	; 255
    159a:	fe 01       	movw	r30, r28
    159c:	e3 5b       	subi	r30, 0xB3	; 179
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	82 81       	ldd	r24, Z+2	; 0x02
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	f8 01       	movw	r30, r16
    15b2:	91 83       	std	Z+1, r25	; 0x01
    15b4:	80 83       	st	Z, r24
    15b6:	de 01       	movw	r26, r28
    15b8:	a9 5b       	subi	r26, 0xB9	; 185
    15ba:	bf 4f       	sbci	r27, 0xFF	; 255
    15bc:	fe 01       	movw	r30, r28
    15be:	e5 5b       	subi	r30, 0xB5	; 181
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
    15c6:	8d 93       	st	X+, r24
    15c8:	9c 93       	st	X, r25
    15ca:	fe 01       	movw	r30, r28
    15cc:	e9 5b       	subi	r30, 0xB9	; 185
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	80 81       	ld	r24, Z
    15d2:	91 81       	ldd	r25, Z+1	; 0x01
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <LCD_sendCommand+0x306>
    15d8:	fe 01       	movw	r30, r28
    15da:	e9 5b       	subi	r30, 0xB9	; 185
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	91 83       	std	Z+1, r25	; 0x01
    15e0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_readPort>
    15e8:	fe 01       	movw	r30, r28
    15ea:	ed 59       	subi	r30, 0x9D	; 157
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
    15f0:	fe 01       	movw	r30, r28
    15f2:	ed 59       	subi	r30, 0x9D	; 157
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	80 81       	ld	r24, Z
    15f8:	98 2f       	mov	r25, r24
    15fa:	9f 70       	andi	r25, 0x0F	; 15
    15fc:	fe 01       	movw	r30, r28
    15fe:	ec 59       	subi	r30, 0x9C	; 156
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	80 81       	ld	r24, Z
    1604:	80 7f       	andi	r24, 0xF0	; 240
    1606:	89 2b       	or	r24, r25
    1608:	fe 01       	movw	r30, r28
    160a:	ed 59       	subi	r30, 0x9D	; 157
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((command & 0xF0) >> 4);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    1610:	fe 01       	movw	r30, r28
    1612:	ed 59       	subi	r30, 0x9D	; 157
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	82 e0       	ldi	r24, 0x02	; 2
    1618:	60 81       	ld	r22, Z
    161a:	0e 94 a8 08 	call	0x1150	; 0x1150 <GPIO_writePort>
    161e:	fe 01       	movw	r30, r28
    1620:	ed 5b       	subi	r30, 0xBD	; 189
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a0 e8       	ldi	r26, 0x80	; 128
    162a:	bf e3       	ldi	r27, 0x3F	; 63
    162c:	80 83       	st	Z, r24
    162e:	91 83       	std	Z+1, r25	; 0x01
    1630:	a2 83       	std	Z+2, r26	; 0x02
    1632:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1634:	8e 01       	movw	r16, r28
    1636:	01 5c       	subi	r16, 0xC1	; 193
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	fe 01       	movw	r30, r28
    163c:	ed 5b       	subi	r30, 0xBD	; 189
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	4a e7       	ldi	r20, 0x7A	; 122
    164e:	53 e4       	ldi	r21, 0x43	; 67
    1650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	f8 01       	movw	r30, r16
    165a:	80 83       	st	Z, r24
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	a2 83       	std	Z+2, r26	; 0x02
    1660:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1662:	fe 01       	movw	r30, r28
    1664:	ff 96       	adiw	r30, 0x3f	; 63
    1666:	60 81       	ld	r22, Z
    1668:	71 81       	ldd	r23, Z+1	; 0x01
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e8       	ldi	r20, 0x80	; 128
    1674:	5f e3       	ldi	r21, 0x3F	; 63
    1676:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    167a:	88 23       	and	r24, r24
    167c:	2c f4       	brge	.+10     	; 0x1688 <LCD_sendCommand+0x3ba>
		__ticks = 1;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	9e af       	std	Y+62, r25	; 0x3e
    1684:	8d af       	std	Y+61, r24	; 0x3d
    1686:	46 c0       	rjmp	.+140    	; 0x1714 <LCD_sendCommand+0x446>
	else if (__tmp > 65535)
    1688:	fe 01       	movw	r30, r28
    168a:	ff 96       	adiw	r30, 0x3f	; 63
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	3f ef       	ldi	r19, 0xFF	; 255
    1698:	4f e7       	ldi	r20, 0x7F	; 127
    169a:	57 e4       	ldi	r21, 0x47	; 71
    169c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a0:	18 16       	cp	r1, r24
    16a2:	64 f5       	brge	.+88     	; 0x16fc <LCD_sendCommand+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a4:	fe 01       	movw	r30, r28
    16a6:	ed 5b       	subi	r30, 0xBD	; 189
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	60 81       	ld	r22, Z
    16ac:	71 81       	ldd	r23, Z+1	; 0x01
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e2       	ldi	r20, 0x20	; 32
    16b8:	51 e4       	ldi	r21, 0x41	; 65
    16ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	9e af       	std	Y+62, r25	; 0x3e
    16d0:	8d af       	std	Y+61, r24	; 0x3d
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <LCD_sendCommand+0x424>
    16d4:	89 e1       	ldi	r24, 0x19	; 25
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9c af       	std	Y+60, r25	; 0x3c
    16da:	8b af       	std	Y+59, r24	; 0x3b
    16dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    16de:	9c ad       	ldd	r25, Y+60	; 0x3c
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <LCD_sendCommand+0x412>
    16e4:	9c af       	std	Y+60, r25	; 0x3c
    16e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    16ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	9e af       	std	Y+62, r25	; 0x3e
    16f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    16f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	69 f7       	brne	.-38     	; 0x16d4 <LCD_sendCommand+0x406>
    16fa:	16 c0       	rjmp	.+44     	; 0x1728 <LCD_sendCommand+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fc:	fe 01       	movw	r30, r28
    16fe:	ff 96       	adiw	r30, 0x3f	; 63
    1700:	60 81       	ld	r22, Z
    1702:	71 81       	ldd	r23, Z+1	; 0x01
    1704:	82 81       	ldd	r24, Z+2	; 0x02
    1706:	93 81       	ldd	r25, Z+3	; 0x03
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9e af       	std	Y+62, r25	; 0x3e
    1712:	8d af       	std	Y+61, r24	; 0x3d
    1714:	8d ad       	ldd	r24, Y+61	; 0x3d
    1716:	9e ad       	ldd	r25, Y+62	; 0x3e
    1718:	9a af       	std	Y+58, r25	; 0x3a
    171a:	89 af       	std	Y+57, r24	; 0x39
    171c:	89 ad       	ldd	r24, Y+57	; 0x39
    171e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_sendCommand+0x452>
    1724:	9a af       	std	Y+58, r25	; 0x3a
    1726:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1728:	83 e0       	ldi	r24, 0x03	; 3
    172a:	67 e0       	ldi	r22, 0x07	; 7
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a0 e8       	ldi	r26, 0x80	; 128
    1738:	bf e3       	ldi	r27, 0x3F	; 63
    173a:	8d ab       	std	Y+53, r24	; 0x35
    173c:	9e ab       	std	Y+54, r25	; 0x36
    173e:	af ab       	std	Y+55, r26	; 0x37
    1740:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1742:	6d a9       	ldd	r22, Y+53	; 0x35
    1744:	7e a9       	ldd	r23, Y+54	; 0x36
    1746:	8f a9       	ldd	r24, Y+55	; 0x37
    1748:	98 ad       	ldd	r25, Y+56	; 0x38
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	4a e7       	ldi	r20, 0x7A	; 122
    1750:	53 e4       	ldi	r21, 0x43	; 67
    1752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	89 ab       	std	Y+49, r24	; 0x31
    175c:	9a ab       	std	Y+50, r25	; 0x32
    175e:	ab ab       	std	Y+51, r26	; 0x33
    1760:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1762:	69 a9       	ldd	r22, Y+49	; 0x31
    1764:	7a a9       	ldd	r23, Y+50	; 0x32
    1766:	8b a9       	ldd	r24, Y+51	; 0x33
    1768:	9c a9       	ldd	r25, Y+52	; 0x34
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	5f e3       	ldi	r21, 0x3F	; 63
    1772:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1776:	88 23       	and	r24, r24
    1778:	2c f4       	brge	.+10     	; 0x1784 <LCD_sendCommand+0x4b6>
		__ticks = 1;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	98 ab       	std	Y+48, r25	; 0x30
    1780:	8f a7       	std	Y+47, r24	; 0x2f
    1782:	3f c0       	rjmp	.+126    	; 0x1802 <LCD_sendCommand+0x534>
	else if (__tmp > 65535)
    1784:	69 a9       	ldd	r22, Y+49	; 0x31
    1786:	7a a9       	ldd	r23, Y+50	; 0x32
    1788:	8b a9       	ldd	r24, Y+51	; 0x33
    178a:	9c a9       	ldd	r25, Y+52	; 0x34
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	3f ef       	ldi	r19, 0xFF	; 255
    1790:	4f e7       	ldi	r20, 0x7F	; 127
    1792:	57 e4       	ldi	r21, 0x47	; 71
    1794:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1798:	18 16       	cp	r1, r24
    179a:	4c f5       	brge	.+82     	; 0x17ee <LCD_sendCommand+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179c:	6d a9       	ldd	r22, Y+53	; 0x35
    179e:	7e a9       	ldd	r23, Y+54	; 0x36
    17a0:	8f a9       	ldd	r24, Y+55	; 0x37
    17a2:	98 ad       	ldd	r25, Y+56	; 0x38
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e2       	ldi	r20, 0x20	; 32
    17aa:	51 e4       	ldi	r21, 0x41	; 65
    17ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	98 ab       	std	Y+48, r25	; 0x30
    17c2:	8f a7       	std	Y+47, r24	; 0x2f
    17c4:	0f c0       	rjmp	.+30     	; 0x17e4 <LCD_sendCommand+0x516>
    17c6:	89 e1       	ldi	r24, 0x19	; 25
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9e a7       	std	Y+46, r25	; 0x2e
    17cc:	8d a7       	std	Y+45, r24	; 0x2d
    17ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    17d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <LCD_sendCommand+0x504>
    17d6:	9e a7       	std	Y+46, r25	; 0x2e
    17d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17da:	8f a5       	ldd	r24, Y+47	; 0x2f
    17dc:	98 a9       	ldd	r25, Y+48	; 0x30
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	98 ab       	std	Y+48, r25	; 0x30
    17e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17e6:	98 a9       	ldd	r25, Y+48	; 0x30
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	69 f7       	brne	.-38     	; 0x17c6 <LCD_sendCommand+0x4f8>
    17ec:	14 c0       	rjmp	.+40     	; 0x1816 <LCD_sendCommand+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ee:	69 a9       	ldd	r22, Y+49	; 0x31
    17f0:	7a a9       	ldd	r23, Y+50	; 0x32
    17f2:	8b a9       	ldd	r24, Y+51	; 0x33
    17f4:	9c a9       	ldd	r25, Y+52	; 0x34
    17f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	98 ab       	std	Y+48, r25	; 0x30
    1800:	8f a7       	std	Y+47, r24	; 0x2f
    1802:	8f a5       	ldd	r24, Y+47	; 0x2f
    1804:	98 a9       	ldd	r25, Y+48	; 0x30
    1806:	9c a7       	std	Y+44, r25	; 0x2c
    1808:	8b a7       	std	Y+43, r24	; 0x2b
    180a:	8b a5       	ldd	r24, Y+43	; 0x2b
    180c:	9c a5       	ldd	r25, Y+44	; 0x2c
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <LCD_sendCommand+0x540>
    1812:	9c a7       	std	Y+44, r25	; 0x2c
    1814:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1816:	83 e0       	ldi	r24, 0x03	; 3
    1818:	67 e0       	ldi	r22, 0x07	; 7
    181a:	41 e0       	ldi	r20, 0x01	; 1
    181c:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a0 e8       	ldi	r26, 0x80	; 128
    1826:	bf e3       	ldi	r27, 0x3F	; 63
    1828:	8f a3       	std	Y+39, r24	; 0x27
    182a:	98 a7       	std	Y+40, r25	; 0x28
    182c:	a9 a7       	std	Y+41, r26	; 0x29
    182e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1830:	6f a1       	ldd	r22, Y+39	; 0x27
    1832:	78 a5       	ldd	r23, Y+40	; 0x28
    1834:	89 a5       	ldd	r24, Y+41	; 0x29
    1836:	9a a5       	ldd	r25, Y+42	; 0x2a
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	4a e7       	ldi	r20, 0x7A	; 122
    183e:	53 e4       	ldi	r21, 0x43	; 67
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	8b a3       	std	Y+35, r24	; 0x23
    184a:	9c a3       	std	Y+36, r25	; 0x24
    184c:	ad a3       	std	Y+37, r26	; 0x25
    184e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1850:	6b a1       	ldd	r22, Y+35	; 0x23
    1852:	7c a1       	ldd	r23, Y+36	; 0x24
    1854:	8d a1       	ldd	r24, Y+37	; 0x25
    1856:	9e a1       	ldd	r25, Y+38	; 0x26
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	5f e3       	ldi	r21, 0x3F	; 63
    1860:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1864:	88 23       	and	r24, r24
    1866:	2c f4       	brge	.+10     	; 0x1872 <LCD_sendCommand+0x5a4>
		__ticks = 1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9a a3       	std	Y+34, r25	; 0x22
    186e:	89 a3       	std	Y+33, r24	; 0x21
    1870:	3f c0       	rjmp	.+126    	; 0x18f0 <LCD_sendCommand+0x622>
	else if (__tmp > 65535)
    1872:	6b a1       	ldd	r22, Y+35	; 0x23
    1874:	7c a1       	ldd	r23, Y+36	; 0x24
    1876:	8d a1       	ldd	r24, Y+37	; 0x25
    1878:	9e a1       	ldd	r25, Y+38	; 0x26
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	3f ef       	ldi	r19, 0xFF	; 255
    187e:	4f e7       	ldi	r20, 0x7F	; 127
    1880:	57 e4       	ldi	r21, 0x47	; 71
    1882:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1886:	18 16       	cp	r1, r24
    1888:	4c f5       	brge	.+82     	; 0x18dc <LCD_sendCommand+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188a:	6f a1       	ldd	r22, Y+39	; 0x27
    188c:	78 a5       	ldd	r23, Y+40	; 0x28
    188e:	89 a5       	ldd	r24, Y+41	; 0x29
    1890:	9a a5       	ldd	r25, Y+42	; 0x2a
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	9a a3       	std	Y+34, r25	; 0x22
    18b0:	89 a3       	std	Y+33, r24	; 0x21
    18b2:	0f c0       	rjmp	.+30     	; 0x18d2 <LCD_sendCommand+0x604>
    18b4:	89 e1       	ldi	r24, 0x19	; 25
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	98 a3       	std	Y+32, r25	; 0x20
    18ba:	8f 8f       	std	Y+31, r24	; 0x1f
    18bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18be:	98 a1       	ldd	r25, Y+32	; 0x20
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <LCD_sendCommand+0x5f2>
    18c4:	98 a3       	std	Y+32, r25	; 0x20
    18c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c8:	89 a1       	ldd	r24, Y+33	; 0x21
    18ca:	9a a1       	ldd	r25, Y+34	; 0x22
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	9a a3       	std	Y+34, r25	; 0x22
    18d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d2:	89 a1       	ldd	r24, Y+33	; 0x21
    18d4:	9a a1       	ldd	r25, Y+34	; 0x22
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	69 f7       	brne	.-38     	; 0x18b4 <LCD_sendCommand+0x5e6>
    18da:	14 c0       	rjmp	.+40     	; 0x1904 <LCD_sendCommand+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18dc:	6b a1       	ldd	r22, Y+35	; 0x23
    18de:	7c a1       	ldd	r23, Y+36	; 0x24
    18e0:	8d a1       	ldd	r24, Y+37	; 0x25
    18e2:	9e a1       	ldd	r25, Y+38	; 0x26
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9a a3       	std	Y+34, r25	; 0x22
    18ee:	89 a3       	std	Y+33, r24	; 0x21
    18f0:	89 a1       	ldd	r24, Y+33	; 0x21
    18f2:	9a a1       	ldd	r25, Y+34	; 0x22
    18f4:	9e 8f       	std	Y+30, r25	; 0x1e
    18f6:	8d 8f       	std	Y+29, r24	; 0x1d
    18f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <LCD_sendCommand+0x62e>
    1900:	9e 8f       	std	Y+30, r25	; 0x1e
    1902:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_readPort>
    190a:	fe 01       	movw	r30, r28
    190c:	ed 59       	subi	r30, 0x9D	; 157
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
    1912:	fe 01       	movw	r30, r28
    1914:	ed 59       	subi	r30, 0x9D	; 157
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	28 2f       	mov	r18, r24
    191c:	2f 70       	andi	r18, 0x0F	; 15
    191e:	fe 01       	movw	r30, r28
    1920:	ec 59       	subi	r30, 0x9C	; 156
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	80 81       	ld	r24, Z
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	82 95       	swap	r24
    192c:	92 95       	swap	r25
    192e:	90 7f       	andi	r25, 0xF0	; 240
    1930:	98 27       	eor	r25, r24
    1932:	80 7f       	andi	r24, 0xF0	; 240
    1934:	98 27       	eor	r25, r24
    1936:	82 2b       	or	r24, r18
    1938:	fe 01       	movw	r30, r28
    193a:	ed 59       	subi	r30, 0x9D	; 157
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (command & 0x0F);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    1940:	fe 01       	movw	r30, r28
    1942:	ed 59       	subi	r30, 0x9D	; 157
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	60 81       	ld	r22, Z
    194a:	0e 94 a8 08 	call	0x1150	; 0x1150 <GPIO_writePort>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a0 e8       	ldi	r26, 0x80	; 128
    1954:	bf e3       	ldi	r27, 0x3F	; 63
    1956:	89 8f       	std	Y+25, r24	; 0x19
    1958:	9a 8f       	std	Y+26, r25	; 0x1a
    195a:	ab 8f       	std	Y+27, r26	; 0x1b
    195c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195e:	69 8d       	ldd	r22, Y+25	; 0x19
    1960:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1964:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	4a e7       	ldi	r20, 0x7A	; 122
    196c:	53 e4       	ldi	r21, 0x43	; 67
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	8d 8b       	std	Y+21, r24	; 0x15
    1978:	9e 8b       	std	Y+22, r25	; 0x16
    197a:	af 8b       	std	Y+23, r26	; 0x17
    197c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    197e:	6d 89       	ldd	r22, Y+21	; 0x15
    1980:	7e 89       	ldd	r23, Y+22	; 0x16
    1982:	8f 89       	ldd	r24, Y+23	; 0x17
    1984:	98 8d       	ldd	r25, Y+24	; 0x18
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e8       	ldi	r20, 0x80	; 128
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1992:	88 23       	and	r24, r24
    1994:	2c f4       	brge	.+10     	; 0x19a0 <LCD_sendCommand+0x6d2>
		__ticks = 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	9c 8b       	std	Y+20, r25	; 0x14
    199c:	8b 8b       	std	Y+19, r24	; 0x13
    199e:	3f c0       	rjmp	.+126    	; 0x1a1e <LCD_sendCommand+0x750>
	else if (__tmp > 65535)
    19a0:	6d 89       	ldd	r22, Y+21	; 0x15
    19a2:	7e 89       	ldd	r23, Y+22	; 0x16
    19a4:	8f 89       	ldd	r24, Y+23	; 0x17
    19a6:	98 8d       	ldd	r25, Y+24	; 0x18
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	3f ef       	ldi	r19, 0xFF	; 255
    19ac:	4f e7       	ldi	r20, 0x7F	; 127
    19ae:	57 e4       	ldi	r21, 0x47	; 71
    19b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b4:	18 16       	cp	r1, r24
    19b6:	4c f5       	brge	.+82     	; 0x1a0a <LCD_sendCommand+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b8:	69 8d       	ldd	r22, Y+25	; 0x19
    19ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e2       	ldi	r20, 0x20	; 32
    19c6:	51 e4       	ldi	r21, 0x41	; 65
    19c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	bc 01       	movw	r22, r24
    19d2:	cd 01       	movw	r24, r26
    19d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	9c 8b       	std	Y+20, r25	; 0x14
    19de:	8b 8b       	std	Y+19, r24	; 0x13
    19e0:	0f c0       	rjmp	.+30     	; 0x1a00 <LCD_sendCommand+0x732>
    19e2:	89 e1       	ldi	r24, 0x19	; 25
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9a 8b       	std	Y+18, r25	; 0x12
    19e8:	89 8b       	std	Y+17, r24	; 0x11
    19ea:	89 89       	ldd	r24, Y+17	; 0x11
    19ec:	9a 89       	ldd	r25, Y+18	; 0x12
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_sendCommand+0x720>
    19f2:	9a 8b       	std	Y+18, r25	; 0x12
    19f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f6:	8b 89       	ldd	r24, Y+19	; 0x13
    19f8:	9c 89       	ldd	r25, Y+20	; 0x14
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	9c 8b       	std	Y+20, r25	; 0x14
    19fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a00:	8b 89       	ldd	r24, Y+19	; 0x13
    1a02:	9c 89       	ldd	r25, Y+20	; 0x14
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	69 f7       	brne	.-38     	; 0x19e2 <LCD_sendCommand+0x714>
    1a08:	14 c0       	rjmp	.+40     	; 0x1a32 <LCD_sendCommand+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a10:	98 8d       	ldd	r25, Y+24	; 0x18
    1a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	9c 8b       	std	Y+20, r25	; 0x14
    1a1c:	8b 8b       	std	Y+19, r24	; 0x13
    1a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a20:	9c 89       	ldd	r25, Y+20	; 0x14
    1a22:	98 8b       	std	Y+16, r25	; 0x10
    1a24:	8f 87       	std	Y+15, r24	; 0x0f
    1a26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a28:	98 89       	ldd	r25, Y+16	; 0x10
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	f1 f7       	brne	.-4      	; 0x1a2a <LCD_sendCommand+0x75c>
    1a2e:	98 8b       	std	Y+16, r25	; 0x10
    1a30:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a32:	83 e0       	ldi	r24, 0x03	; 3
    1a34:	67 e0       	ldi	r22, 0x07	; 7
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	a0 e8       	ldi	r26, 0x80	; 128
    1a42:	bf e3       	ldi	r27, 0x3F	; 63
    1a44:	8b 87       	std	Y+11, r24	; 0x0b
    1a46:	9c 87       	std	Y+12, r25	; 0x0c
    1a48:	ad 87       	std	Y+13, r26	; 0x0d
    1a4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	4a e7       	ldi	r20, 0x7A	; 122
    1a5a:	53 e4       	ldi	r21, 0x43	; 67
    1a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	8f 83       	std	Y+7, r24	; 0x07
    1a66:	98 87       	std	Y+8, r25	; 0x08
    1a68:	a9 87       	std	Y+9, r26	; 0x09
    1a6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6e:	78 85       	ldd	r23, Y+8	; 0x08
    1a70:	89 85       	ldd	r24, Y+9	; 0x09
    1a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e8       	ldi	r20, 0x80	; 128
    1a7a:	5f e3       	ldi	r21, 0x3F	; 63
    1a7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a80:	88 23       	and	r24, r24
    1a82:	2c f4       	brge	.+10     	; 0x1a8e <LCD_sendCommand+0x7c0>
		__ticks = 1;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
    1a8c:	3f c0       	rjmp	.+126    	; 0x1b0c <LCD_sendCommand+0x83e>
	else if (__tmp > 65535)
    1a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a90:	78 85       	ldd	r23, Y+8	; 0x08
    1a92:	89 85       	ldd	r24, Y+9	; 0x09
    1a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	3f ef       	ldi	r19, 0xFF	; 255
    1a9a:	4f e7       	ldi	r20, 0x7F	; 127
    1a9c:	57 e4       	ldi	r21, 0x47	; 71
    1a9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa2:	18 16       	cp	r1, r24
    1aa4:	4c f5       	brge	.+82     	; 0x1af8 <LCD_sendCommand+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e2       	ldi	r20, 0x20	; 32
    1ab4:	51 e4       	ldi	r21, 0x41	; 65
    1ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	bc 01       	movw	r22, r24
    1ac0:	cd 01       	movw	r24, r26
    1ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	9e 83       	std	Y+6, r25	; 0x06
    1acc:	8d 83       	std	Y+5, r24	; 0x05
    1ace:	0f c0       	rjmp	.+30     	; 0x1aee <LCD_sendCommand+0x820>
    1ad0:	89 e1       	ldi	r24, 0x19	; 25
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	9c 83       	std	Y+4, r25	; 0x04
    1ad6:	8b 83       	std	Y+3, r24	; 0x03
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	9c 81       	ldd	r25, Y+4	; 0x04
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <LCD_sendCommand+0x80e>
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	9e 83       	std	Y+6, r25	; 0x06
    1aec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	69 f7       	brne	.-38     	; 0x1ad0 <LCD_sendCommand+0x802>
    1af6:	14 c0       	rjmp	.+40     	; 0x1b20 <LCD_sendCommand+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af8:	6f 81       	ldd	r22, Y+7	; 0x07
    1afa:	78 85       	ldd	r23, Y+8	; 0x08
    1afc:	89 85       	ldd	r24, Y+9	; 0x09
    1afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_sendCommand+0x84a>
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b20:	cc 59       	subi	r28, 0x9C	; 156
    1b22:	df 4f       	sbci	r29, 0xFF	; 255
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	08 95       	ret

00001b38 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1b38:	0f 93       	push	r16
    1b3a:	1f 93       	push	r17
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	c4 56       	subi	r28, 0x64	; 100
    1b46:	d0 40       	sbci	r29, 0x00	; 0
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	fe 01       	movw	r30, r28
    1b54:	ec 59       	subi	r30, 0x9C	; 156
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	ed 59       	subi	r30, 0x9D	; 157
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	65 e0       	ldi	r22, 0x05	; 5
    1b66:	41 e0       	ldi	r20, 0x01	; 1
    1b68:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1b6c:	83 e0       	ldi	r24, 0x03	; 3
    1b6e:	66 e0       	ldi	r22, 0x06	; 6
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
    1b76:	fe 01       	movw	r30, r28
    1b78:	e1 5a       	subi	r30, 0xA1	; 161
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a0 e8       	ldi	r26, 0x80	; 128
    1b82:	bf e3       	ldi	r27, 0x3F	; 63
    1b84:	80 83       	st	Z, r24
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	a2 83       	std	Z+2, r26	; 0x02
    1b8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8c:	8e 01       	movw	r16, r28
    1b8e:	05 5a       	subi	r16, 0xA5	; 165
    1b90:	1f 4f       	sbci	r17, 0xFF	; 255
    1b92:	fe 01       	movw	r30, r28
    1b94:	e1 5a       	subi	r30, 0xA1	; 161
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	4a e7       	ldi	r20, 0x7A	; 122
    1ba6:	53 e4       	ldi	r21, 0x43	; 67
    1ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	80 83       	st	Z, r24
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	a2 83       	std	Z+2, r26	; 0x02
    1bb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e5 5a       	subi	r30, 0xA5	; 165
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	60 81       	ld	r22, Z
    1bc2:	71 81       	ldd	r23, Z+1	; 0x01
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	93 81       	ldd	r25, Z+3	; 0x03
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	44 f4       	brge	.+16     	; 0x1be8 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e7 5a       	subi	r30, 0xA7	; 167
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24
    1be6:	64 c0       	rjmp	.+200    	; 0x1cb0 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1be8:	fe 01       	movw	r30, r28
    1bea:	e5 5a       	subi	r30, 0xA5	; 165
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	0c f0       	brlt	.+2      	; 0x1c08 <LCD_displayCharacter+0xd0>
    1c06:	43 c0       	rjmp	.+134    	; 0x1c8e <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e1 5a       	subi	r30, 0xA1	; 161
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	8e 01       	movw	r16, r28
    1c28:	07 5a       	subi	r16, 0xA7	; 167
    1c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	f8 01       	movw	r30, r16
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	80 83       	st	Z, r24
    1c3e:	1f c0       	rjmp	.+62     	; 0x1c7e <LCD_displayCharacter+0x146>
    1c40:	fe 01       	movw	r30, r28
    1c42:	e9 5a       	subi	r30, 0xA9	; 169
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	89 e1       	ldi	r24, 0x19	; 25
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	91 83       	std	Z+1, r25	; 0x01
    1c4c:	80 83       	st	Z, r24
    1c4e:	fe 01       	movw	r30, r28
    1c50:	e9 5a       	subi	r30, 0xA9	; 169
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	80 81       	ld	r24, Z
    1c56:	91 81       	ldd	r25, Z+1	; 0x01
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <LCD_displayCharacter+0x120>
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	e9 5a       	subi	r30, 0xA9	; 169
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	91 83       	std	Z+1, r25	; 0x01
    1c64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c66:	de 01       	movw	r26, r28
    1c68:	a7 5a       	subi	r26, 0xA7	; 167
    1c6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e7 5a       	subi	r30, 0xA7	; 167
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	11 96       	adiw	r26, 0x01	; 1
    1c7a:	9c 93       	st	X, r25
    1c7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e7 5a       	subi	r30, 0xA7	; 167
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 81       	ld	r24, Z
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	d1 f6       	brne	.-76     	; 0x1c40 <LCD_displayCharacter+0x108>
    1c8c:	27 c0       	rjmp	.+78     	; 0x1cdc <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8e:	8e 01       	movw	r16, r28
    1c90:	07 5a       	subi	r16, 0xA7	; 167
    1c92:	1f 4f       	sbci	r17, 0xFF	; 255
    1c94:	fe 01       	movw	r30, r28
    1c96:	e5 5a       	subi	r30, 0xA5	; 165
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	60 81       	ld	r22, Z
    1c9c:	71 81       	ldd	r23, Z+1	; 0x01
    1c9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ca0:	93 81       	ldd	r25, Z+3	; 0x03
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	f8 01       	movw	r30, r16
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	80 83       	st	Z, r24
    1cb0:	de 01       	movw	r26, r28
    1cb2:	ab 5a       	subi	r26, 0xAB	; 171
    1cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e7 5a       	subi	r30, 0xA7	; 167
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 81       	ld	r24, Z
    1cbe:	91 81       	ldd	r25, Z+1	; 0x01
    1cc0:	8d 93       	st	X+, r24
    1cc2:	9c 93       	st	X, r25
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	eb 5a       	subi	r30, 0xAB	; 171
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	80 81       	ld	r24, Z
    1ccc:	91 81       	ldd	r25, Z+1	; 0x01
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <LCD_displayCharacter+0x196>
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	eb 5a       	subi	r30, 0xAB	; 171
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	67 e0       	ldi	r22, 0x07	; 7
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	ef 5a       	subi	r30, 0xAF	; 175
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	a0 e8       	ldi	r26, 0x80	; 128
    1cf2:	bf e3       	ldi	r27, 0x3F	; 63
    1cf4:	80 83       	st	Z, r24
    1cf6:	91 83       	std	Z+1, r25	; 0x01
    1cf8:	a2 83       	std	Z+2, r26	; 0x02
    1cfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfc:	8e 01       	movw	r16, r28
    1cfe:	03 5b       	subi	r16, 0xB3	; 179
    1d00:	1f 4f       	sbci	r17, 0xFF	; 255
    1d02:	fe 01       	movw	r30, r28
    1d04:	ef 5a       	subi	r30, 0xAF	; 175
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	60 81       	ld	r22, Z
    1d0a:	71 81       	ldd	r23, Z+1	; 0x01
    1d0c:	82 81       	ldd	r24, Z+2	; 0x02
    1d0e:	93 81       	ldd	r25, Z+3	; 0x03
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	4a e7       	ldi	r20, 0x7A	; 122
    1d16:	53 e4       	ldi	r21, 0x43	; 67
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	f8 01       	movw	r30, r16
    1d22:	80 83       	st	Z, r24
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	a2 83       	std	Z+2, r26	; 0x02
    1d28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e3 5b       	subi	r30, 0xB3	; 179
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	60 81       	ld	r22, Z
    1d32:	71 81       	ldd	r23, Z+1	; 0x01
    1d34:	82 81       	ldd	r24, Z+2	; 0x02
    1d36:	93 81       	ldd	r25, Z+3	; 0x03
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e8       	ldi	r20, 0x80	; 128
    1d3e:	5f e3       	ldi	r21, 0x3F	; 63
    1d40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d44:	88 23       	and	r24, r24
    1d46:	44 f4       	brge	.+16     	; 0x1d58 <LCD_displayCharacter+0x220>
		__ticks = 1;
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e5 5b       	subi	r30, 0xB5	; 181
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	80 83       	st	Z, r24
    1d56:	64 c0       	rjmp	.+200    	; 0x1e20 <LCD_displayCharacter+0x2e8>
	else if (__tmp > 65535)
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e3 5b       	subi	r30, 0xB3	; 179
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	60 81       	ld	r22, Z
    1d60:	71 81       	ldd	r23, Z+1	; 0x01
    1d62:	82 81       	ldd	r24, Z+2	; 0x02
    1d64:	93 81       	ldd	r25, Z+3	; 0x03
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	0c f0       	brlt	.+2      	; 0x1d78 <LCD_displayCharacter+0x240>
    1d76:	43 c0       	rjmp	.+134    	; 0x1dfe <LCD_displayCharacter+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d78:	fe 01       	movw	r30, r28
    1d7a:	ef 5a       	subi	r30, 0xAF	; 175
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	60 81       	ld	r22, Z
    1d80:	71 81       	ldd	r23, Z+1	; 0x01
    1d82:	82 81       	ldd	r24, Z+2	; 0x02
    1d84:	93 81       	ldd	r25, Z+3	; 0x03
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e2       	ldi	r20, 0x20	; 32
    1d8c:	51 e4       	ldi	r21, 0x41	; 65
    1d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	8e 01       	movw	r16, r28
    1d98:	05 5b       	subi	r16, 0xB5	; 181
    1d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	f8 01       	movw	r30, r16
    1daa:	91 83       	std	Z+1, r25	; 0x01
    1dac:	80 83       	st	Z, r24
    1dae:	1f c0       	rjmp	.+62     	; 0x1dee <LCD_displayCharacter+0x2b6>
    1db0:	fe 01       	movw	r30, r28
    1db2:	e7 5b       	subi	r30, 0xB7	; 183
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	89 e1       	ldi	r24, 0x19	; 25
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	91 83       	std	Z+1, r25	; 0x01
    1dbc:	80 83       	st	Z, r24
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e7 5b       	subi	r30, 0xB7	; 183
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 81       	ld	r24, Z
    1dc6:	91 81       	ldd	r25, Z+1	; 0x01
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <LCD_displayCharacter+0x290>
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e7 5b       	subi	r30, 0xB7	; 183
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd6:	de 01       	movw	r26, r28
    1dd8:	a5 5b       	subi	r26, 0xB5	; 181
    1dda:	bf 4f       	sbci	r27, 0xFF	; 255
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e5 5b       	subi	r30, 0xB5	; 181
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 81       	ld	r24, Z
    1de4:	91 81       	ldd	r25, Z+1	; 0x01
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	11 96       	adiw	r26, 0x01	; 1
    1dea:	9c 93       	st	X, r25
    1dec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dee:	fe 01       	movw	r30, r28
    1df0:	e5 5b       	subi	r30, 0xB5	; 181
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	80 81       	ld	r24, Z
    1df6:	91 81       	ldd	r25, Z+1	; 0x01
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	d1 f6       	brne	.-76     	; 0x1db0 <LCD_displayCharacter+0x278>
    1dfc:	27 c0       	rjmp	.+78     	; 0x1e4c <LCD_displayCharacter+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	8e 01       	movw	r16, r28
    1e00:	05 5b       	subi	r16, 0xB5	; 181
    1e02:	1f 4f       	sbci	r17, 0xFF	; 255
    1e04:	fe 01       	movw	r30, r28
    1e06:	e3 5b       	subi	r30, 0xB3	; 179
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	60 81       	ld	r22, Z
    1e0c:	71 81       	ldd	r23, Z+1	; 0x01
    1e0e:	82 81       	ldd	r24, Z+2	; 0x02
    1e10:	93 81       	ldd	r25, Z+3	; 0x03
    1e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	91 83       	std	Z+1, r25	; 0x01
    1e1e:	80 83       	st	Z, r24
    1e20:	de 01       	movw	r26, r28
    1e22:	a9 5b       	subi	r26, 0xB9	; 185
    1e24:	bf 4f       	sbci	r27, 0xFF	; 255
    1e26:	fe 01       	movw	r30, r28
    1e28:	e5 5b       	subi	r30, 0xB5	; 181
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	8d 93       	st	X+, r24
    1e32:	9c 93       	st	X, r25
    1e34:	fe 01       	movw	r30, r28
    1e36:	e9 5b       	subi	r30, 0xB9	; 185
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <LCD_displayCharacter+0x306>
    1e42:	fe 01       	movw	r30, r28
    1e44:	e9 5b       	subi	r30, 0xB9	; 185
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_readPort>
    1e52:	fe 01       	movw	r30, r28
    1e54:	ed 59       	subi	r30, 0x9D	; 157
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	ed 59       	subi	r30, 0x9D	; 157
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	98 2f       	mov	r25, r24
    1e64:	9f 70       	andi	r25, 0x0F	; 15
    1e66:	fe 01       	movw	r30, r28
    1e68:	ec 59       	subi	r30, 0x9C	; 156
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    1e6e:	80 7f       	andi	r24, 0xF0	; 240
    1e70:	89 2b       	or	r24, r25
    1e72:	fe 01       	movw	r30, r28
    1e74:	ed 59       	subi	r30, 0x9D	; 157
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((data & 0xF0) >> 4);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ed 59       	subi	r30, 0x9D	; 157
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	60 81       	ld	r22, Z
    1e84:	0e 94 a8 08 	call	0x1150	; 0x1150 <GPIO_writePort>
    1e88:	fe 01       	movw	r30, r28
    1e8a:	ed 5b       	subi	r30, 0xBD	; 189
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	a0 e8       	ldi	r26, 0x80	; 128
    1e94:	bf e3       	ldi	r27, 0x3F	; 63
    1e96:	80 83       	st	Z, r24
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	a2 83       	std	Z+2, r26	; 0x02
    1e9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9e:	8e 01       	movw	r16, r28
    1ea0:	01 5c       	subi	r16, 0xC1	; 193
    1ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ed 5b       	subi	r30, 0xBD	; 189
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	4a e7       	ldi	r20, 0x7A	; 122
    1eb8:	53 e4       	ldi	r21, 0x43	; 67
    1eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	80 83       	st	Z, r24
    1ec6:	91 83       	std	Z+1, r25	; 0x01
    1ec8:	a2 83       	std	Z+2, r26	; 0x02
    1eca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ecc:	fe 01       	movw	r30, r28
    1ece:	ff 96       	adiw	r30, 0x3f	; 63
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee4:	88 23       	and	r24, r24
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <LCD_displayCharacter+0x3ba>
		__ticks = 1;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9e af       	std	Y+62, r25	; 0x3e
    1eee:	8d af       	std	Y+61, r24	; 0x3d
    1ef0:	46 c0       	rjmp	.+140    	; 0x1f7e <LCD_displayCharacter+0x446>
	else if (__tmp > 65535)
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	ff 96       	adiw	r30, 0x3f	; 63
    1ef6:	60 81       	ld	r22, Z
    1ef8:	71 81       	ldd	r23, Z+1	; 0x01
    1efa:	82 81       	ldd	r24, Z+2	; 0x02
    1efc:	93 81       	ldd	r25, Z+3	; 0x03
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	3f ef       	ldi	r19, 0xFF	; 255
    1f02:	4f e7       	ldi	r20, 0x7F	; 127
    1f04:	57 e4       	ldi	r21, 0x47	; 71
    1f06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f0a:	18 16       	cp	r1, r24
    1f0c:	64 f5       	brge	.+88     	; 0x1f66 <LCD_displayCharacter+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0e:	fe 01       	movw	r30, r28
    1f10:	ed 5b       	subi	r30, 0xBD	; 189
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	60 81       	ld	r22, Z
    1f16:	71 81       	ldd	r23, Z+1	; 0x01
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e2       	ldi	r20, 0x20	; 32
    1f22:	51 e4       	ldi	r21, 0x41	; 65
    1f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	bc 01       	movw	r22, r24
    1f2e:	cd 01       	movw	r24, r26
    1f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	9e af       	std	Y+62, r25	; 0x3e
    1f3a:	8d af       	std	Y+61, r24	; 0x3d
    1f3c:	0f c0       	rjmp	.+30     	; 0x1f5c <LCD_displayCharacter+0x424>
    1f3e:	89 e1       	ldi	r24, 0x19	; 25
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9c af       	std	Y+60, r25	; 0x3c
    1f44:	8b af       	std	Y+59, r24	; 0x3b
    1f46:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f48:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <LCD_displayCharacter+0x412>
    1f4e:	9c af       	std	Y+60, r25	; 0x3c
    1f50:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f52:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f54:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	9e af       	std	Y+62, r25	; 0x3e
    1f5a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	69 f7       	brne	.-38     	; 0x1f3e <LCD_displayCharacter+0x406>
    1f64:	16 c0       	rjmp	.+44     	; 0x1f92 <LCD_displayCharacter+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f66:	fe 01       	movw	r30, r28
    1f68:	ff 96       	adiw	r30, 0x3f	; 63
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9e af       	std	Y+62, r25	; 0x3e
    1f7c:	8d af       	std	Y+61, r24	; 0x3d
    1f7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f80:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f82:	9a af       	std	Y+58, r25	; 0x3a
    1f84:	89 af       	std	Y+57, r24	; 0x39
    1f86:	89 ad       	ldd	r24, Y+57	; 0x39
    1f88:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_displayCharacter+0x452>
    1f8e:	9a af       	std	Y+58, r25	; 0x3a
    1f90:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f92:	83 e0       	ldi	r24, 0x03	; 3
    1f94:	67 e0       	ldi	r22, 0x07	; 7
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a0 e8       	ldi	r26, 0x80	; 128
    1fa2:	bf e3       	ldi	r27, 0x3F	; 63
    1fa4:	8d ab       	std	Y+53, r24	; 0x35
    1fa6:	9e ab       	std	Y+54, r25	; 0x36
    1fa8:	af ab       	std	Y+55, r26	; 0x37
    1faa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fac:	6d a9       	ldd	r22, Y+53	; 0x35
    1fae:	7e a9       	ldd	r23, Y+54	; 0x36
    1fb0:	8f a9       	ldd	r24, Y+55	; 0x37
    1fb2:	98 ad       	ldd	r25, Y+56	; 0x38
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	4a e7       	ldi	r20, 0x7A	; 122
    1fba:	53 e4       	ldi	r21, 0x43	; 67
    1fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	89 ab       	std	Y+49, r24	; 0x31
    1fc6:	9a ab       	std	Y+50, r25	; 0x32
    1fc8:	ab ab       	std	Y+51, r26	; 0x33
    1fca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fcc:	69 a9       	ldd	r22, Y+49	; 0x31
    1fce:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e8       	ldi	r20, 0x80	; 128
    1fda:	5f e3       	ldi	r21, 0x3F	; 63
    1fdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe0:	88 23       	and	r24, r24
    1fe2:	2c f4       	brge	.+10     	; 0x1fee <LCD_displayCharacter+0x4b6>
		__ticks = 1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	98 ab       	std	Y+48, r25	; 0x30
    1fea:	8f a7       	std	Y+47, r24	; 0x2f
    1fec:	3f c0       	rjmp	.+126    	; 0x206c <LCD_displayCharacter+0x534>
	else if (__tmp > 65535)
    1fee:	69 a9       	ldd	r22, Y+49	; 0x31
    1ff0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ff2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	3f ef       	ldi	r19, 0xFF	; 255
    1ffa:	4f e7       	ldi	r20, 0x7F	; 127
    1ffc:	57 e4       	ldi	r21, 0x47	; 71
    1ffe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2002:	18 16       	cp	r1, r24
    2004:	4c f5       	brge	.+82     	; 0x2058 <LCD_displayCharacter+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2006:	6d a9       	ldd	r22, Y+53	; 0x35
    2008:	7e a9       	ldd	r23, Y+54	; 0x36
    200a:	8f a9       	ldd	r24, Y+55	; 0x37
    200c:	98 ad       	ldd	r25, Y+56	; 0x38
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e2       	ldi	r20, 0x20	; 32
    2014:	51 e4       	ldi	r21, 0x41	; 65
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	98 ab       	std	Y+48, r25	; 0x30
    202c:	8f a7       	std	Y+47, r24	; 0x2f
    202e:	0f c0       	rjmp	.+30     	; 0x204e <LCD_displayCharacter+0x516>
    2030:	89 e1       	ldi	r24, 0x19	; 25
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9e a7       	std	Y+46, r25	; 0x2e
    2036:	8d a7       	std	Y+45, r24	; 0x2d
    2038:	8d a5       	ldd	r24, Y+45	; 0x2d
    203a:	9e a5       	ldd	r25, Y+46	; 0x2e
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_displayCharacter+0x504>
    2040:	9e a7       	std	Y+46, r25	; 0x2e
    2042:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2044:	8f a5       	ldd	r24, Y+47	; 0x2f
    2046:	98 a9       	ldd	r25, Y+48	; 0x30
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	98 ab       	std	Y+48, r25	; 0x30
    204c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2050:	98 a9       	ldd	r25, Y+48	; 0x30
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	69 f7       	brne	.-38     	; 0x2030 <LCD_displayCharacter+0x4f8>
    2056:	14 c0       	rjmp	.+40     	; 0x2080 <LCD_displayCharacter+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2058:	69 a9       	ldd	r22, Y+49	; 0x31
    205a:	7a a9       	ldd	r23, Y+50	; 0x32
    205c:	8b a9       	ldd	r24, Y+51	; 0x33
    205e:	9c a9       	ldd	r25, Y+52	; 0x34
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	98 ab       	std	Y+48, r25	; 0x30
    206a:	8f a7       	std	Y+47, r24	; 0x2f
    206c:	8f a5       	ldd	r24, Y+47	; 0x2f
    206e:	98 a9       	ldd	r25, Y+48	; 0x30
    2070:	9c a7       	std	Y+44, r25	; 0x2c
    2072:	8b a7       	std	Y+43, r24	; 0x2b
    2074:	8b a5       	ldd	r24, Y+43	; 0x2b
    2076:	9c a5       	ldd	r25, Y+44	; 0x2c
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <LCD_displayCharacter+0x540>
    207c:	9c a7       	std	Y+44, r25	; 0x2c
    207e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2080:	83 e0       	ldi	r24, 0x03	; 3
    2082:	67 e0       	ldi	r22, 0x07	; 7
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	a0 e8       	ldi	r26, 0x80	; 128
    2090:	bf e3       	ldi	r27, 0x3F	; 63
    2092:	8f a3       	std	Y+39, r24	; 0x27
    2094:	98 a7       	std	Y+40, r25	; 0x28
    2096:	a9 a7       	std	Y+41, r26	; 0x29
    2098:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209a:	6f a1       	ldd	r22, Y+39	; 0x27
    209c:	78 a5       	ldd	r23, Y+40	; 0x28
    209e:	89 a5       	ldd	r24, Y+41	; 0x29
    20a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	4a e7       	ldi	r20, 0x7A	; 122
    20a8:	53 e4       	ldi	r21, 0x43	; 67
    20aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	8b a3       	std	Y+35, r24	; 0x23
    20b4:	9c a3       	std	Y+36, r25	; 0x24
    20b6:	ad a3       	std	Y+37, r26	; 0x25
    20b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ba:	6b a1       	ldd	r22, Y+35	; 0x23
    20bc:	7c a1       	ldd	r23, Y+36	; 0x24
    20be:	8d a1       	ldd	r24, Y+37	; 0x25
    20c0:	9e a1       	ldd	r25, Y+38	; 0x26
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e8       	ldi	r20, 0x80	; 128
    20c8:	5f e3       	ldi	r21, 0x3F	; 63
    20ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ce:	88 23       	and	r24, r24
    20d0:	2c f4       	brge	.+10     	; 0x20dc <LCD_displayCharacter+0x5a4>
		__ticks = 1;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	9a a3       	std	Y+34, r25	; 0x22
    20d8:	89 a3       	std	Y+33, r24	; 0x21
    20da:	3f c0       	rjmp	.+126    	; 0x215a <LCD_displayCharacter+0x622>
	else if (__tmp > 65535)
    20dc:	6b a1       	ldd	r22, Y+35	; 0x23
    20de:	7c a1       	ldd	r23, Y+36	; 0x24
    20e0:	8d a1       	ldd	r24, Y+37	; 0x25
    20e2:	9e a1       	ldd	r25, Y+38	; 0x26
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	3f ef       	ldi	r19, 0xFF	; 255
    20e8:	4f e7       	ldi	r20, 0x7F	; 127
    20ea:	57 e4       	ldi	r21, 0x47	; 71
    20ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f0:	18 16       	cp	r1, r24
    20f2:	4c f5       	brge	.+82     	; 0x2146 <LCD_displayCharacter+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f4:	6f a1       	ldd	r22, Y+39	; 0x27
    20f6:	78 a5       	ldd	r23, Y+40	; 0x28
    20f8:	89 a5       	ldd	r24, Y+41	; 0x29
    20fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e2       	ldi	r20, 0x20	; 32
    2102:	51 e4       	ldi	r21, 0x41	; 65
    2104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	bc 01       	movw	r22, r24
    210e:	cd 01       	movw	r24, r26
    2110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	9a a3       	std	Y+34, r25	; 0x22
    211a:	89 a3       	std	Y+33, r24	; 0x21
    211c:	0f c0       	rjmp	.+30     	; 0x213c <LCD_displayCharacter+0x604>
    211e:	89 e1       	ldi	r24, 0x19	; 25
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	98 a3       	std	Y+32, r25	; 0x20
    2124:	8f 8f       	std	Y+31, r24	; 0x1f
    2126:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2128:	98 a1       	ldd	r25, Y+32	; 0x20
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <LCD_displayCharacter+0x5f2>
    212e:	98 a3       	std	Y+32, r25	; 0x20
    2130:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2132:	89 a1       	ldd	r24, Y+33	; 0x21
    2134:	9a a1       	ldd	r25, Y+34	; 0x22
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	9a a3       	std	Y+34, r25	; 0x22
    213a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213c:	89 a1       	ldd	r24, Y+33	; 0x21
    213e:	9a a1       	ldd	r25, Y+34	; 0x22
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	69 f7       	brne	.-38     	; 0x211e <LCD_displayCharacter+0x5e6>
    2144:	14 c0       	rjmp	.+40     	; 0x216e <LCD_displayCharacter+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2146:	6b a1       	ldd	r22, Y+35	; 0x23
    2148:	7c a1       	ldd	r23, Y+36	; 0x24
    214a:	8d a1       	ldd	r24, Y+37	; 0x25
    214c:	9e a1       	ldd	r25, Y+38	; 0x26
    214e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	9a a3       	std	Y+34, r25	; 0x22
    2158:	89 a3       	std	Y+33, r24	; 0x21
    215a:	89 a1       	ldd	r24, Y+33	; 0x21
    215c:	9a a1       	ldd	r25, Y+34	; 0x22
    215e:	9e 8f       	std	Y+30, r25	; 0x1e
    2160:	8d 8f       	std	Y+29, r24	; 0x1d
    2162:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2164:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <LCD_displayCharacter+0x62e>
    216a:	9e 8f       	std	Y+30, r25	; 0x1e
    216c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    216e:	82 e0       	ldi	r24, 0x02	; 2
    2170:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <GPIO_readPort>
    2174:	fe 01       	movw	r30, r28
    2176:	ed 59       	subi	r30, 0x9D	; 157
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
    217c:	fe 01       	movw	r30, r28
    217e:	ed 59       	subi	r30, 0x9D	; 157
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 81       	ld	r24, Z
    2184:	28 2f       	mov	r18, r24
    2186:	2f 70       	andi	r18, 0x0F	; 15
    2188:	fe 01       	movw	r30, r28
    218a:	ec 59       	subi	r30, 0x9C	; 156
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	80 81       	ld	r24, Z
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	82 95       	swap	r24
    2196:	92 95       	swap	r25
    2198:	90 7f       	andi	r25, 0xF0	; 240
    219a:	98 27       	eor	r25, r24
    219c:	80 7f       	andi	r24, 0xF0	; 240
    219e:	98 27       	eor	r25, r24
    21a0:	82 2b       	or	r24, r18
    21a2:	fe 01       	movw	r30, r28
    21a4:	ed 59       	subi	r30, 0x9D	; 157
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (data & 0x0F);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    21aa:	fe 01       	movw	r30, r28
    21ac:	ed 59       	subi	r30, 0x9D	; 157
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	60 81       	ld	r22, Z
    21b4:	0e 94 a8 08 	call	0x1150	; 0x1150 <GPIO_writePort>
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	a0 e8       	ldi	r26, 0x80	; 128
    21be:	bf e3       	ldi	r27, 0x3F	; 63
    21c0:	89 8f       	std	Y+25, r24	; 0x19
    21c2:	9a 8f       	std	Y+26, r25	; 0x1a
    21c4:	ab 8f       	std	Y+27, r26	; 0x1b
    21c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c8:	69 8d       	ldd	r22, Y+25	; 0x19
    21ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	4a e7       	ldi	r20, 0x7A	; 122
    21d6:	53 e4       	ldi	r21, 0x43	; 67
    21d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	8d 8b       	std	Y+21, r24	; 0x15
    21e2:	9e 8b       	std	Y+22, r25	; 0x16
    21e4:	af 8b       	std	Y+23, r26	; 0x17
    21e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21e8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ea:	7e 89       	ldd	r23, Y+22	; 0x16
    21ec:	8f 89       	ldd	r24, Y+23	; 0x17
    21ee:	98 8d       	ldd	r25, Y+24	; 0x18
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e8       	ldi	r20, 0x80	; 128
    21f6:	5f e3       	ldi	r21, 0x3F	; 63
    21f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fc:	88 23       	and	r24, r24
    21fe:	2c f4       	brge	.+10     	; 0x220a <LCD_displayCharacter+0x6d2>
		__ticks = 1;
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9c 8b       	std	Y+20, r25	; 0x14
    2206:	8b 8b       	std	Y+19, r24	; 0x13
    2208:	3f c0       	rjmp	.+126    	; 0x2288 <LCD_displayCharacter+0x750>
	else if (__tmp > 65535)
    220a:	6d 89       	ldd	r22, Y+21	; 0x15
    220c:	7e 89       	ldd	r23, Y+22	; 0x16
    220e:	8f 89       	ldd	r24, Y+23	; 0x17
    2210:	98 8d       	ldd	r25, Y+24	; 0x18
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	3f ef       	ldi	r19, 0xFF	; 255
    2216:	4f e7       	ldi	r20, 0x7F	; 127
    2218:	57 e4       	ldi	r21, 0x47	; 71
    221a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221e:	18 16       	cp	r1, r24
    2220:	4c f5       	brge	.+82     	; 0x2274 <LCD_displayCharacter+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2222:	69 8d       	ldd	r22, Y+25	; 0x19
    2224:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2226:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2228:	9c 8d       	ldd	r25, Y+28	; 0x1c
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e2       	ldi	r20, 0x20	; 32
    2230:	51 e4       	ldi	r21, 0x41	; 65
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9c 8b       	std	Y+20, r25	; 0x14
    2248:	8b 8b       	std	Y+19, r24	; 0x13
    224a:	0f c0       	rjmp	.+30     	; 0x226a <LCD_displayCharacter+0x732>
    224c:	89 e1       	ldi	r24, 0x19	; 25
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9a 8b       	std	Y+18, r25	; 0x12
    2252:	89 8b       	std	Y+17, r24	; 0x11
    2254:	89 89       	ldd	r24, Y+17	; 0x11
    2256:	9a 89       	ldd	r25, Y+18	; 0x12
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_displayCharacter+0x720>
    225c:	9a 8b       	std	Y+18, r25	; 0x12
    225e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2260:	8b 89       	ldd	r24, Y+19	; 0x13
    2262:	9c 89       	ldd	r25, Y+20	; 0x14
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	9c 8b       	std	Y+20, r25	; 0x14
    2268:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226a:	8b 89       	ldd	r24, Y+19	; 0x13
    226c:	9c 89       	ldd	r25, Y+20	; 0x14
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	69 f7       	brne	.-38     	; 0x224c <LCD_displayCharacter+0x714>
    2272:	14 c0       	rjmp	.+40     	; 0x229c <LCD_displayCharacter+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2274:	6d 89       	ldd	r22, Y+21	; 0x15
    2276:	7e 89       	ldd	r23, Y+22	; 0x16
    2278:	8f 89       	ldd	r24, Y+23	; 0x17
    227a:	98 8d       	ldd	r25, Y+24	; 0x18
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9c 8b       	std	Y+20, r25	; 0x14
    2286:	8b 8b       	std	Y+19, r24	; 0x13
    2288:	8b 89       	ldd	r24, Y+19	; 0x13
    228a:	9c 89       	ldd	r25, Y+20	; 0x14
    228c:	98 8b       	std	Y+16, r25	; 0x10
    228e:	8f 87       	std	Y+15, r24	; 0x0f
    2290:	8f 85       	ldd	r24, Y+15	; 0x0f
    2292:	98 89       	ldd	r25, Y+16	; 0x10
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <LCD_displayCharacter+0x75c>
    2298:	98 8b       	std	Y+16, r25	; 0x10
    229a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	67 e0       	ldi	r22, 0x07	; 7
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a0 e8       	ldi	r26, 0x80	; 128
    22ac:	bf e3       	ldi	r27, 0x3F	; 63
    22ae:	8b 87       	std	Y+11, r24	; 0x0b
    22b0:	9c 87       	std	Y+12, r25	; 0x0c
    22b2:	ad 87       	std	Y+13, r26	; 0x0d
    22b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    22bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4a e7       	ldi	r20, 0x7A	; 122
    22c4:	53 e4       	ldi	r21, 0x43	; 67
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	8f 83       	std	Y+7, r24	; 0x07
    22d0:	98 87       	std	Y+8, r25	; 0x08
    22d2:	a9 87       	std	Y+9, r26	; 0x09
    22d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d6:	6f 81       	ldd	r22, Y+7	; 0x07
    22d8:	78 85       	ldd	r23, Y+8	; 0x08
    22da:	89 85       	ldd	r24, Y+9	; 0x09
    22dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e8       	ldi	r20, 0x80	; 128
    22e4:	5f e3       	ldi	r21, 0x3F	; 63
    22e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ea:	88 23       	and	r24, r24
    22ec:	2c f4       	brge	.+10     	; 0x22f8 <LCD_displayCharacter+0x7c0>
		__ticks = 1;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
    22f6:	3f c0       	rjmp	.+126    	; 0x2376 <LCD_displayCharacter+0x83e>
	else if (__tmp > 65535)
    22f8:	6f 81       	ldd	r22, Y+7	; 0x07
    22fa:	78 85       	ldd	r23, Y+8	; 0x08
    22fc:	89 85       	ldd	r24, Y+9	; 0x09
    22fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	3f ef       	ldi	r19, 0xFF	; 255
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	57 e4       	ldi	r21, 0x47	; 71
    2308:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230c:	18 16       	cp	r1, r24
    230e:	4c f5       	brge	.+82     	; 0x2362 <LCD_displayCharacter+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2310:	6b 85       	ldd	r22, Y+11	; 0x0b
    2312:	7c 85       	ldd	r23, Y+12	; 0x0c
    2314:	8d 85       	ldd	r24, Y+13	; 0x0d
    2316:	9e 85       	ldd	r25, Y+14	; 0x0e
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e2       	ldi	r20, 0x20	; 32
    231e:	51 e4       	ldi	r21, 0x41	; 65
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	8d 83       	std	Y+5, r24	; 0x05
    2338:	0f c0       	rjmp	.+30     	; 0x2358 <LCD_displayCharacter+0x820>
    233a:	89 e1       	ldi	r24, 0x19	; 25
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9c 83       	std	Y+4, r25	; 0x04
    2340:	8b 83       	std	Y+3, r24	; 0x03
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_displayCharacter+0x80e>
    234a:	9c 83       	std	Y+4, r25	; 0x04
    234c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234e:	8d 81       	ldd	r24, Y+5	; 0x05
    2350:	9e 81       	ldd	r25, Y+6	; 0x06
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	69 f7       	brne	.-38     	; 0x233a <LCD_displayCharacter+0x802>
    2360:	14 c0       	rjmp	.+40     	; 0x238a <LCD_displayCharacter+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2362:	6f 81       	ldd	r22, Y+7	; 0x07
    2364:	78 85       	ldd	r23, Y+8	; 0x08
    2366:	89 85       	ldd	r24, Y+9	; 0x09
    2368:	9a 85       	ldd	r25, Y+10	; 0x0a
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9e 83       	std	Y+6, r25	; 0x06
    2374:	8d 83       	std	Y+5, r24	; 0x05
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	9e 81       	ldd	r25, Y+6	; 0x06
    237a:	9a 83       	std	Y+2, r25	; 0x02
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	9a 81       	ldd	r25, Y+2	; 0x02
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCD_displayCharacter+0x84a>
    2386:	9a 83       	std	Y+2, r25	; 0x02
    2388:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    238a:	cc 59       	subi	r28, 0x9C	; 156
    238c:	df 4f       	sbci	r29, 0xFF	; 255
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	08 95       	ret

000023a2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <LCD_displayString+0x6>
    23a8:	0f 92       	push	r0
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	9b 83       	std	Y+3, r25	; 0x03
    23b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23b2:	19 82       	std	Y+1, r1	; 0x01
    23b4:	0e c0       	rjmp	.+28     	; 0x23d2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	9b 81       	ldd	r25, Y+3	; 0x03
    23c0:	fc 01       	movw	r30, r24
    23c2:	e2 0f       	add	r30, r18
    23c4:	f3 1f       	adc	r31, r19
    23c6:	80 81       	ld	r24, Z
    23c8:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_displayCharacter>
		i++;
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	8f 5f       	subi	r24, 0xFF	; 255
    23d0:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	9b 81       	ldd	r25, Y+3	; 0x03
    23dc:	fc 01       	movw	r30, r24
    23de:	e2 0f       	add	r30, r18
    23e0:	f3 1f       	adc	r31, r19
    23e2:	80 81       	ld	r24, Z
    23e4:	88 23       	and	r24, r24
    23e6:	39 f7       	brne	.-50     	; 0x23b6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <LCD_moveCursor+0x6>
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <LCD_moveCursor+0x8>
    23fc:	0f 92       	push	r0
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	8a 83       	std	Y+2, r24	; 0x02
    2404:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	3d 83       	std	Y+5, r19	; 0x05
    240e:	2c 83       	std	Y+4, r18	; 0x04
    2410:	8c 81       	ldd	r24, Y+4	; 0x04
    2412:	9d 81       	ldd	r25, Y+5	; 0x05
    2414:	81 30       	cpi	r24, 0x01	; 1
    2416:	91 05       	cpc	r25, r1
    2418:	c1 f0       	breq	.+48     	; 0x244a <LCD_moveCursor+0x56>
    241a:	2c 81       	ldd	r18, Y+4	; 0x04
    241c:	3d 81       	ldd	r19, Y+5	; 0x05
    241e:	22 30       	cpi	r18, 0x02	; 2
    2420:	31 05       	cpc	r19, r1
    2422:	2c f4       	brge	.+10     	; 0x242e <LCD_moveCursor+0x3a>
    2424:	8c 81       	ldd	r24, Y+4	; 0x04
    2426:	9d 81       	ldd	r25, Y+5	; 0x05
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	61 f0       	breq	.+24     	; 0x2444 <LCD_moveCursor+0x50>
    242c:	19 c0       	rjmp	.+50     	; 0x2460 <LCD_moveCursor+0x6c>
    242e:	2c 81       	ldd	r18, Y+4	; 0x04
    2430:	3d 81       	ldd	r19, Y+5	; 0x05
    2432:	22 30       	cpi	r18, 0x02	; 2
    2434:	31 05       	cpc	r19, r1
    2436:	69 f0       	breq	.+26     	; 0x2452 <LCD_moveCursor+0x5e>
    2438:	8c 81       	ldd	r24, Y+4	; 0x04
    243a:	9d 81       	ldd	r25, Y+5	; 0x05
    243c:	83 30       	cpi	r24, 0x03	; 3
    243e:	91 05       	cpc	r25, r1
    2440:	61 f0       	breq	.+24     	; 0x245a <LCD_moveCursor+0x66>
    2442:	0e c0       	rjmp	.+28     	; 0x2460 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	0b c0       	rjmp	.+22     	; 0x2460 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	80 5c       	subi	r24, 0xC0	; 192
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	07 c0       	rjmp	.+14     	; 0x2460 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	80 5f       	subi	r24, 0xF0	; 240
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	03 c0       	rjmp	.+6      	; 0x2460 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	80 5b       	subi	r24, 0xB0	; 176
    245e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	80 68       	ori	r24, 0x80	; 128
    2464:	0e 94 67 09 	call	0x12ce	; 0x12ce <LCD_sendCommand>
}
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	00 d0       	rcall	.+0      	; 0x247e <LCD_displayStringRowColumn+0x6>
    247e:	00 d0       	rcall	.+0      	; 0x2480 <LCD_displayStringRowColumn+0x8>
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	6a 83       	std	Y+2, r22	; 0x02
    2488:	5c 83       	std	Y+4, r21	; 0x04
    248a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	6a 81       	ldd	r22, Y+2	; 0x02
    2490:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	9c 81       	ldd	r25, Y+4	; 0x04
    2498:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_displayString>
}
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	62 97       	sbiw	r28, 0x12	; 18
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	9a 8b       	std	Y+18, r25	; 0x12
    24c0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    24c2:	89 89       	ldd	r24, Y+17	; 0x11
    24c4:	9a 89       	ldd	r25, Y+18	; 0x12
    24c6:	9e 01       	movw	r18, r28
    24c8:	2f 5f       	subi	r18, 0xFF	; 255
    24ca:	3f 4f       	sbci	r19, 0xFF	; 255
    24cc:	b9 01       	movw	r22, r18
    24ce:	4a e0       	ldi	r20, 0x0A	; 10
    24d0:	50 e0       	ldi	r21, 0x00	; 0
    24d2:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <itoa>
   LCD_displayString(buff); /* Display the string */
    24d6:	ce 01       	movw	r24, r28
    24d8:	01 96       	adiw	r24, 0x01	; 1
    24da:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_displayString>
}
    24de:	62 96       	adiw	r28, 0x12	; 18
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	f8 94       	cli
    24e4:	de bf       	out	0x3e, r29	; 62
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	cd bf       	out	0x3d, r28	; 61
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	0e 94 67 09 	call	0x12ce	; 0x12ce <LCD_sendCommand>
}
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret

00002504 <main>:

#include "main.h"


void main()
{
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	6c 97       	sbiw	r28, 0x1c	; 28
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61

	//LCD and motors Initializations
	LCD_init();
    2518:	0e 94 31 09 	call	0x1262	; 0x1262 <LCD_init>
	stepmotor_init();
    251c:	0e 94 62 14 	call	0x28c4	; 0x28c4 <stepmotor_init>
	DCmotor_init();
    2520:	0e 94 a3 05 	call	0xb46	; 0xb46 <DCmotor_init>

	//Starting timer
	SREG |= (1<<7);
    2524:	af e5       	ldi	r26, 0x5F	; 95
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	ef e5       	ldi	r30, 0x5F	; 95
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	80 68       	ori	r24, 0x80	; 128
    2530:	8c 93       	st	X, r24
	Timer1_Init();
    2532:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <Timer1_Init>

	//initializing titles on LCD
	LCD_clearScreen();
    2536:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_clearScreen>
	LCD_moveCursor(1,0);
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	60 e0       	ldi	r22, 0x00	; 0
    253e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
	LCD_displayString("Time:  :  :  AM");
    2542:	80 e6       	ldi	r24, 0x60	; 96
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_displayString>
	LCD_moveCursor(0,8);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	68 e0       	ldi	r22, 0x08	; 8
    254e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
	LCD_displayString("Dir:");
    2552:	80 e7       	ldi	r24, 0x70	; 112
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_displayString>
	LCD_moveCursor(0,0);
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
	LCD_displayString("Spd:   %");
    2562:	85 e7       	ldi	r24, 0x75	; 117
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_displayString>
	//Defining variables
	uint8 speed; // store DC motor speed
	uint8 DCdirc;// store DC motor direction
	uint8 angle; // store stepper motor angle
	uint8 stepdirc; // store stepper motor direction
	uint8 hours=00; //store the current hours passed
    256a:	1c 82       	std	Y+4, r1	; 0x04
	uint8 min=00; // store the current minutes passed
    256c:	1b 82       	std	Y+3, r1	; 0x03
	uint8 AM=1; // store the state of the day weather AM or PM
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	8a 83       	std	Y+2, r24	; 0x02
	uint8 input[8]={0}; //store the input data from the user
    2572:	88 e0       	ldi	r24, 0x08	; 8
    2574:	fe 01       	movw	r30, r28
    2576:	39 96       	adiw	r30, 0x09	; 9
    2578:	df 01       	movw	r26, r30
    257a:	48 2f       	mov	r20, r24
    257c:	1d 92       	st	X+, r1
    257e:	4a 95       	dec	r20
    2580:	e9 f7       	brne	.-6      	; 0x257c <main+0x78>
	/* 1. size of the character = 8 bits
	 * 2. Disable parity check
	 * 3. Use one stop bit (E)
	 * 4. Choose 9600 bit/sec baud rate
	 */
	UART_ConfigType UART_Configuration = { EIGHT_BIT , DISABLED , ONE_BIT , 9600 };
    2582:	ce 01       	movw	r24, r28
    2584:	41 96       	adiw	r24, 0x11	; 17
    2586:	99 8f       	std	Y+25, r25	; 0x19
    2588:	88 8f       	std	Y+24, r24	; 0x18
    258a:	ac e8       	ldi	r26, 0x8C	; 140
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	bb 8f       	std	Y+27, r27	; 0x1b
    2590:	aa 8f       	std	Y+26, r26	; 0x1a
    2592:	b7 e0       	ldi	r27, 0x07	; 7
    2594:	bc 8f       	std	Y+28, r27	; 0x1c
    2596:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2598:	fb 8d       	ldd	r31, Y+27	; 0x1b
    259a:	00 80       	ld	r0, Z
    259c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    259e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    25a0:	4f 5f       	subi	r20, 0xFF	; 255
    25a2:	5f 4f       	sbci	r21, 0xFF	; 255
    25a4:	5b 8f       	std	Y+27, r21	; 0x1b
    25a6:	4a 8f       	std	Y+26, r20	; 0x1a
    25a8:	a8 8d       	ldd	r26, Y+24	; 0x18
    25aa:	b9 8d       	ldd	r27, Y+25	; 0x19
    25ac:	0c 92       	st	X, r0
    25ae:	e8 8d       	ldd	r30, Y+24	; 0x18
    25b0:	f9 8d       	ldd	r31, Y+25	; 0x19
    25b2:	31 96       	adiw	r30, 0x01	; 1
    25b4:	f9 8f       	std	Y+25, r31	; 0x19
    25b6:	e8 8f       	std	Y+24, r30	; 0x18
    25b8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    25ba:	f1 50       	subi	r31, 0x01	; 1
    25bc:	fc 8f       	std	Y+28, r31	; 0x1c
    25be:	4c 8d       	ldd	r20, Y+28	; 0x1c
    25c0:	44 23       	and	r20, r20
    25c2:	49 f7       	brne	.-46     	; 0x2596 <main+0x92>
	UART_init(&UART_Configuration);
    25c4:	ce 01       	movw	r24, r28
    25c6:	41 96       	adiw	r24, 0x11	; 17
    25c8:	0e 94 6f 16 	call	0x2cde	; 0x2cde <UART_init>


	while (1)
	{
		// a loop to display the current time
		if (sec<10)
    25cc:	80 91 95 00 	lds	r24, 0x0095
    25d0:	8a 30       	cpi	r24, 0x0A	; 10
    25d2:	58 f4       	brcc	.+22     	; 0x25ea <main+0xe6>
		{
			LCD_moveCursor(1,12);
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	6c e0       	ldi	r22, 0x0C	; 12
    25d8:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_intgerToString(sec);
    25dc:	80 91 95 00 	lds	r24, 0x0095
    25e0:	88 2f       	mov	r24, r24
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_intgerToString>
    25e8:	31 c0       	rjmp	.+98     	; 0x264c <main+0x148>
		}
		else if (sec == 60)
    25ea:	80 91 95 00 	lds	r24, 0x0095
    25ee:	8c 33       	cpi	r24, 0x3C	; 60
    25f0:	71 f4       	brne	.+28     	; 0x260e <main+0x10a>
		{
			sec =0;
    25f2:	10 92 95 00 	sts	0x0095, r1
			LCD_moveCursor(1,11);
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	6b e0       	ldi	r22, 0x0B	; 11
    25fa:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_intgerToString(00);
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_intgerToString>
			min++;
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	8f 5f       	subi	r24, 0xFF	; 255
    260a:	8b 83       	std	Y+3, r24	; 0x03
    260c:	1f c0       	rjmp	.+62     	; 0x264c <main+0x148>
		}
		else if (sec>60)
    260e:	80 91 95 00 	lds	r24, 0x0095
    2612:	8d 33       	cpi	r24, 0x3D	; 61
    2614:	88 f0       	brcs	.+34     	; 0x2638 <main+0x134>
		{
			sec -=60;
    2616:	80 91 95 00 	lds	r24, 0x0095
    261a:	8c 53       	subi	r24, 0x3C	; 60
    261c:	80 93 95 00 	sts	0x0095, r24
			LCD_moveCursor(1,11);
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	6b e0       	ldi	r22, 0x0B	; 11
    2624:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_intgerToString(00);
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_intgerToString>
			min++;
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	8b 83       	std	Y+3, r24	; 0x03
    2636:	0a c0       	rjmp	.+20     	; 0x264c <main+0x148>
		}
		else
		{
			LCD_moveCursor(1,11);
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	6b e0       	ldi	r22, 0x0B	; 11
    263c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_intgerToString(sec);
    2640:	80 91 95 00 	lds	r24, 0x0095
    2644:	88 2f       	mov	r24, r24
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_intgerToString>
		}

		if (min<10)
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	8a 30       	cpi	r24, 0x0A	; 10
    2650:	50 f4       	brcc	.+20     	; 0x2666 <main+0x162>
		{
			LCD_moveCursor(1,9);
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	69 e0       	ldi	r22, 0x09	; 9
    2656:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_intgerToString(min);
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	88 2f       	mov	r24, r24
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_intgerToString>
    2664:	19 c0       	rjmp	.+50     	; 0x2698 <main+0x194>
		}
		else if (min == 60)
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	8c 33       	cpi	r24, 0x3C	; 60
    266a:	69 f4       	brne	.+26     	; 0x2686 <main+0x182>
		{
			min=0;
    266c:	1b 82       	std	Y+3, r1	; 0x03
			LCD_moveCursor(1,8);
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	68 e0       	ldi	r22, 0x08	; 8
    2672:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_intgerToString(00);
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_intgerToString>
			hours++;
    267e:	8c 81       	ldd	r24, Y+4	; 0x04
    2680:	8f 5f       	subi	r24, 0xFF	; 255
    2682:	8c 83       	std	Y+4, r24	; 0x04
    2684:	09 c0       	rjmp	.+18     	; 0x2698 <main+0x194>
		}
		else
		{
			LCD_moveCursor(1,8);
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	68 e0       	ldi	r22, 0x08	; 8
    268a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_intgerToString(min);
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_intgerToString>
		}

		if (hours < 10)
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	8a 30       	cpi	r24, 0x0A	; 10
    269c:	50 f4       	brcc	.+20     	; 0x26b2 <main+0x1ae>
		{
			LCD_moveCursor(1,6);
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	66 e0       	ldi	r22, 0x06	; 6
    26a2:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_intgerToString(hours);
    26a6:	8c 81       	ldd	r24, Y+4	; 0x04
    26a8:	88 2f       	mov	r24, r24
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_intgerToString>
    26b0:	2d c0       	rjmp	.+90     	; 0x270c <main+0x208>
		}
		else if (hours == 12)
    26b2:	8c 81       	ldd	r24, Y+4	; 0x04
    26b4:	8c 30       	cpi	r24, 0x0C	; 12
    26b6:	09 f5       	brne	.+66     	; 0x26fa <main+0x1f6>
		{
			hours = 0;
    26b8:	1c 82       	std	Y+4, r1	; 0x04
			LCD_moveCursor(1,5);
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	65 e0       	ldi	r22, 0x05	; 5
    26be:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_intgerToString(00);
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_intgerToString>
			if (AM == 1)
    26ca:	8a 81       	ldd	r24, Y+2	; 0x02
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	51 f4       	brne	.+20     	; 0x26e4 <main+0x1e0>
			{
				LCD_moveCursor(1,13);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	6d e0       	ldi	r22, 0x0D	; 13
    26d4:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
				LCD_displayString("PM");
    26d8:	8e e7       	ldi	r24, 0x7E	; 126
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_displayString>
				AM=0;
    26e0:	1a 82       	std	Y+2, r1	; 0x02
    26e2:	14 c0       	rjmp	.+40     	; 0x270c <main+0x208>
			}
			else
			{
				LCD_moveCursor(1,13);
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	6d e0       	ldi	r22, 0x0D	; 13
    26e8:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
				LCD_displayString("AM");
    26ec:	81 e8       	ldi	r24, 0x81	; 129
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_displayString>
				AM=1;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	8a 83       	std	Y+2, r24	; 0x02
    26f8:	09 c0       	rjmp	.+18     	; 0x270c <main+0x208>
			}
		}
		else
		{
			LCD_moveCursor(1,5);
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	65 e0       	ldi	r22, 0x05	; 5
    26fe:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_intgerToString(hours);
    2702:	8c 81       	ldd	r24, Y+4	; 0x04
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_intgerToString>
		}


		//check if the user start to write the input
		if (!BIT_IS_CLEAR(UCSRA,RXC))
    270c:	eb e2       	ldi	r30, 0x2B	; 43
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	88 23       	and	r24, r24
    2714:	0c f0       	brlt	.+2      	; 0x2718 <main+0x214>
    2716:	5a cf       	rjmp	.-332    	; 0x25cc <main+0xc8>
		{	//if the user started, start to store the values in theinput array
			UART_receiveString(input);
    2718:	ce 01       	movw	r24, r28
    271a:	09 96       	adiw	r24, 0x09	; 9
    271c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <UART_receiveString>
			//setting LCD with new values
			LCD_clearScreen();
    2720:	0e 94 78 12 	call	0x24f0	; 0x24f0 <LCD_clearScreen>
			LCD_moveCursor(1,0);
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	60 e0       	ldi	r22, 0x00	; 0
    2728:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_displayString("Time:  :  :  AM");
    272c:	80 e6       	ldi	r24, 0x60	; 96
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_displayString>
			LCD_moveCursor(0,9);
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	69 e0       	ldi	r22, 0x09	; 9
    2738:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_displayString("Dir:");
    273c:	80 e7       	ldi	r24, 0x70	; 112
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_displayString>
			LCD_moveCursor(0,0);
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_displayString("Spd:   %");
    274c:	85 e7       	ldi	r24, 0x75	; 117
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LCD_displayString>

			//Initializing angle and direction of stepper motor
			//convert the string to numbers to be calculated
			for ( i =4 ; i<6 ; i++ )
    2754:	84 e0       	ldi	r24, 0x04	; 4
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	17 c0       	rjmp	.+46     	; 0x2788 <main+0x284>
			{
				input[i]-=48;
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	48 2f       	mov	r20, r24
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	ce 01       	movw	r24, r28
    2768:	09 96       	adiw	r24, 0x09	; 9
    276a:	fc 01       	movw	r30, r24
    276c:	e2 0f       	add	r30, r18
    276e:	f3 1f       	adc	r31, r19
    2770:	80 81       	ld	r24, Z
    2772:	28 2f       	mov	r18, r24
    2774:	20 53       	subi	r18, 0x30	; 48
    2776:	ce 01       	movw	r24, r28
    2778:	09 96       	adiw	r24, 0x09	; 9
    277a:	fc 01       	movw	r30, r24
    277c:	e4 0f       	add	r30, r20
    277e:	f5 1f       	adc	r31, r21
    2780:	20 83       	st	Z, r18
			LCD_moveCursor(0,0);
			LCD_displayString("Spd:   %");

			//Initializing angle and direction of stepper motor
			//convert the string to numbers to be calculated
			for ( i =4 ; i<6 ; i++ )
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	8f 5f       	subi	r24, 0xFF	; 255
    2786:	89 83       	std	Y+1, r24	; 0x01
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	86 30       	cpi	r24, 0x06	; 6
    278c:	30 f3       	brcs	.-52     	; 0x275a <main+0x256>
			{
				input[i]-=48;
			}
			angle = input[4] * 10  + input[5];
    278e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2790:	88 2f       	mov	r24, r24
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	9c 01       	movw	r18, r24
    2796:	22 0f       	add	r18, r18
    2798:	33 1f       	adc	r19, r19
    279a:	c9 01       	movw	r24, r18
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	82 0f       	add	r24, r18
    27a6:	93 1f       	adc	r25, r19
    27a8:	98 2f       	mov	r25, r24
    27aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ac:	89 0f       	add	r24, r25
    27ae:	8e 83       	std	Y+6, r24	; 0x06
			stepdirc = input [6];
    27b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b2:	8d 83       	std	Y+5, r24	; 0x05


			if (stepdirc == 'L')
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	8c 34       	cpi	r24, 0x4C	; 76
    27b8:	69 f4       	brne	.+26     	; 0x27d4 <main+0x2d0>
			{
				LCD_moveCursor(0,13);
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	6d e0       	ldi	r22, 0x0D	; 13
    27be:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
				LCD_intgerToString(-angle);
    27c2:	8e 81       	ldd	r24, Y+6	; 0x06
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	90 95       	com	r25
    27ca:	81 95       	neg	r24
    27cc:	9f 4f       	sbci	r25, 0xFF	; 255
    27ce:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_intgerToString>
    27d2:	0c c0       	rjmp	.+24     	; 0x27ec <main+0x2e8>
			}
			else if (stepdirc == 'R')
    27d4:	8d 81       	ldd	r24, Y+5	; 0x05
    27d6:	82 35       	cpi	r24, 0x52	; 82
    27d8:	49 f4       	brne	.+18     	; 0x27ec <main+0x2e8>
			{
				LCD_moveCursor(0,13);
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	6d e0       	ldi	r22, 0x0D	; 13
    27de:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
				LCD_intgerToString(angle);
    27e2:	8e 81       	ldd	r24, Y+6	; 0x06
    27e4:	88 2f       	mov	r24, r24
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_intgerToString>
			}

			//initializing stepper motor with its values(speed and direction)
			stepmotor_info(angle,stepdirc);
    27ec:	8e 81       	ldd	r24, Y+6	; 0x06
    27ee:	6d 81       	ldd	r22, Y+5	; 0x05
    27f0:	0e 94 91 14 	call	0x2922	; 0x2922 <stepmotor_info>

			//Initializing speed and direction of DC motor
			//convert the string to numbers to be calculated
			for ( i =0 ; i<3 ; i++ )
    27f4:	19 82       	std	Y+1, r1	; 0x01
    27f6:	17 c0       	rjmp	.+46     	; 0x2826 <main+0x322>
			{
				input[i]-=48;
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	48 2f       	mov	r20, r24
    27fc:	50 e0       	ldi	r21, 0x00	; 0
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	ce 01       	movw	r24, r28
    2806:	09 96       	adiw	r24, 0x09	; 9
    2808:	fc 01       	movw	r30, r24
    280a:	e2 0f       	add	r30, r18
    280c:	f3 1f       	adc	r31, r19
    280e:	80 81       	ld	r24, Z
    2810:	28 2f       	mov	r18, r24
    2812:	20 53       	subi	r18, 0x30	; 48
    2814:	ce 01       	movw	r24, r28
    2816:	09 96       	adiw	r24, 0x09	; 9
    2818:	fc 01       	movw	r30, r24
    281a:	e4 0f       	add	r30, r20
    281c:	f5 1f       	adc	r31, r21
    281e:	20 83       	st	Z, r18
			//initializing stepper motor with its values(speed and direction)
			stepmotor_info(angle,stepdirc);

			//Initializing speed and direction of DC motor
			//convert the string to numbers to be calculated
			for ( i =0 ; i<3 ; i++ )
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	8f 5f       	subi	r24, 0xFF	; 255
    2824:	89 83       	std	Y+1, r24	; 0x01
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	83 30       	cpi	r24, 0x03	; 3
    282a:	30 f3       	brcs	.-52     	; 0x27f8 <main+0x2f4>
			{
				input[i]-=48;
			}
			speed = input[0] * 100 + input[1] * 10 + input[2];
    282c:	89 85       	ldd	r24, Y+9	; 0x09
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	84 e6       	ldi	r24, 0x64	; 100
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	dc 01       	movw	r26, r24
    2838:	2a 9f       	mul	r18, r26
    283a:	c0 01       	movw	r24, r0
    283c:	2b 9f       	mul	r18, r27
    283e:	90 0d       	add	r25, r0
    2840:	3a 9f       	mul	r19, r26
    2842:	90 0d       	add	r25, r0
    2844:	11 24       	eor	r1, r1
    2846:	48 2f       	mov	r20, r24
    2848:	8a 85       	ldd	r24, Y+10	; 0x0a
    284a:	88 2f       	mov	r24, r24
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9c 01       	movw	r18, r24
    2850:	22 0f       	add	r18, r18
    2852:	33 1f       	adc	r19, r19
    2854:	c9 01       	movw	r24, r18
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	88 0f       	add	r24, r24
    285c:	99 1f       	adc	r25, r25
    285e:	82 0f       	add	r24, r18
    2860:	93 1f       	adc	r25, r19
    2862:	94 2f       	mov	r25, r20
    2864:	98 0f       	add	r25, r24
    2866:	8b 85       	ldd	r24, Y+11	; 0x0b
    2868:	89 0f       	add	r24, r25
    286a:	88 87       	std	Y+8, r24	; 0x08


			LCD_moveCursor(0,4);
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	64 e0       	ldi	r22, 0x04	; 4
    2870:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <LCD_moveCursor>
			LCD_intgerToString(speed);
    2874:	88 85       	ldd	r24, Y+8	; 0x08
    2876:	88 2f       	mov	r24, r24
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_intgerToString>

			DCdirc= input[3];
    287e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2880:	8f 83       	std	Y+7, r24	; 0x07

			//initializing DC motor with its values(speed and direction)
			DCmotor_info(speed,DCdirc);
    2882:	88 85       	ldd	r24, Y+8	; 0x08
    2884:	6f 81       	ldd	r22, Y+7	; 0x07
    2886:	0e 94 be 05 	call	0xb7c	; 0xb7c <DCmotor_info>
    288a:	a0 ce       	rjmp	.-704    	; 0x25cc <main+0xc8>

0000288c <PWM_Timer0_Start>:
 *5. Setup the direction for OC0 as output pin through the GPIO driver.
 *6. The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */

void PWM_Timer0_Start( uint8 duty_cycle )
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	0f 92       	push	r0
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
    2898:	e2 e5       	ldi	r30, 0x52	; 82
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	10 82       	st	Z, r1

	OCR0  = duty_cycle ; // Set Compare Value
    289e:	ec e5       	ldi	r30, 0x5C	; 92
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    28a6:	a7 e3       	ldi	r26, 0x37	; 55
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e7 e3       	ldi	r30, 0x37	; 55
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	88 60       	ori	r24, 0x08	; 8
    28b2:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    28b4:	e3 e5       	ldi	r30, 0x53	; 83
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	8a e6       	ldi	r24, 0x6A	; 106
    28ba:	80 83       	st	Z, r24
}
    28bc:	0f 90       	pop	r0
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <stepmotor_init>:
uint8 anglecount =0;
uint8 motor_steps[4];

/* setting output pins for the motor and set an initializing value for them */
void stepmotor_init(void)
{
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
	// Configure first 4 pins in PORTA as output pins
	GPIO_setupPinDirection(STEPmotor_PORTA,STEPmotor_PINA, PIN_OUTPUT);
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	60 e0       	ldi	r22, 0x00	; 0
    28d0:	41 e0       	ldi	r20, 0x01	; 1
    28d2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(STEPmotor_PORTB,STEPmotor_PINB, PIN_OUTPUT);
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	61 e0       	ldi	r22, 0x01	; 1
    28da:	41 e0       	ldi	r20, 0x01	; 1
    28dc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(STEPmotor_PORTC,STEPmotor_PINC, PIN_OUTPUT);
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	62 e0       	ldi	r22, 0x02	; 2
    28e4:	41 e0       	ldi	r20, 0x01	; 1
    28e6:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(STEPmotor_PORTD,STEPmotor_PIND, PIN_OUTPUT);
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	63 e0       	ldi	r22, 0x03	; 3
    28ee:	41 e0       	ldi	r20, 0x01	; 1
    28f0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GPIO_setupPinDirection>

	// Clear first four bits in PORTA to stop the motor at the beginning */
	GPIO_writePin(STEPmotor_PORTA,STEPmotor_PINA, LOGIC_LOW);
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
	GPIO_writePin(STEPmotor_PORTB,STEPmotor_PINB, LOGIC_LOW);
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	61 e0       	ldi	r22, 0x01	; 1
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
	GPIO_writePin(STEPmotor_PORTC,STEPmotor_PINC, LOGIC_LOW);
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	62 e0       	ldi	r22, 0x02	; 2
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
	GPIO_writePin(STEPmotor_PORTD,STEPmotor_PIND, LOGIC_LOW);
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	63 e0       	ldi	r22, 0x03	; 3
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPIO_writePin>
}
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <stepmotor_info>:

/* setting the angle and the direction of the motor according to the input */
void stepmotor_info (uint8 angle , uint8 dirct)
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	00 d0       	rcall	.+0      	; 0x2928 <stepmotor_info+0x6>
    2928:	0f 92       	push	r0
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
    292e:	8a 83       	std	Y+2, r24	; 0x02
    2930:	6b 83       	std	Y+3, r22	; 0x03
	if ( angle < 0 || angle > 45 || (dirct != 'R' && dirct != 'L'))
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	8e 32       	cpi	r24, 0x2E	; 46
    2936:	48 f5       	brcc	.+82     	; 0x298a <stepmotor_info+0x68>
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	82 35       	cpi	r24, 0x52	; 82
    293c:	19 f0       	breq	.+6      	; 0x2944 <stepmotor_info+0x22>
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	8c 34       	cpi	r24, 0x4C	; 76
    2942:	19 f5       	brne	.+70     	; 0x298a <stepmotor_info+0x68>
	{
		uint8 prevangle; // variable to store previous angle

		/*check if the angle of the motor have been changed previously
		  as the angle count will store its value */
		if (anglecount != 0)
    2944:	80 91 94 00 	lds	r24, 0x0094
    2948:	88 23       	and	r24, r24
    294a:	81 f0       	breq	.+32     	; 0x296c <stepmotor_info+0x4a>
			{
			prevangle = anglecount;
    294c:	80 91 94 00 	lds	r24, 0x0094
    2950:	89 83       	std	Y+1, r24	; 0x01
			anglecount =0;
    2952:	10 92 94 00 	sts	0x0094, r1
			/*know the previous angle direction from the value store in the array
			and rotate in the opposite direction to  reach angle 0 */
			if (motor_steps[0] == 12)
    2956:	80 91 96 00 	lds	r24, 0x0096
    295a:	8c 30       	cpi	r24, 0x0C	; 12
    295c:	21 f4       	brne	.+8      	; 0x2966 <stepmotor_info+0x44>
				left(prevangle);
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	0e 94 cb 14 	call	0x2996	; 0x2996 <left>
    2964:	03 c0       	rjmp	.+6      	; 0x296c <stepmotor_info+0x4a>
			else
				right(prevangle);
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <right>
			}

		anglecount =0;
    296c:	10 92 94 00 	sts	0x0094, r1
		/* if there is no previous actions or after resting motor to angle zero
		move to the required angle*/
		if (dirct == 'R')
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	82 35       	cpi	r24, 0x52	; 82
    2974:	21 f4       	brne	.+8      	; 0x297e <stepmotor_info+0x5c>
			right(angle);
    2976:	8a 81       	ldd	r24, Y+2	; 0x02
    2978:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <right>
    297c:	06 c0       	rjmp	.+12     	; 0x298a <stepmotor_info+0x68>
		else if (dirct == 'L')
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	8c 34       	cpi	r24, 0x4C	; 76
    2982:	19 f4       	brne	.+6      	; 0x298a <stepmotor_info+0x68>
			left(angle);
    2984:	8a 81       	ldd	r24, Y+2	; 0x02
    2986:	0e 94 cb 14 	call	0x2996	; 0x2996 <left>

	}
}
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <left>:

//storing the values of the current directions to attract the magnet towards it and rotate in ACW direction
void left (uint8 angle)
{
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	0f 92       	push	r0
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	89 83       	std	Y+1, r24	; 0x01
	motor_steps[0]=3;
    29a2:	83 e0       	ldi	r24, 0x03	; 3
    29a4:	80 93 96 00 	sts	0x0096, r24
	motor_steps[1]=6;
    29a8:	86 e0       	ldi	r24, 0x06	; 6
    29aa:	80 93 97 00 	sts	0x0097, r24
	motor_steps[2]=12;
    29ae:	8c e0       	ldi	r24, 0x0C	; 12
    29b0:	80 93 98 00 	sts	0x0098, r24
	motor_steps[3]=9;
    29b4:	89 e0       	ldi	r24, 0x09	; 9
    29b6:	80 93 99 00 	sts	0x0099, r24
	rotate(angle);
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	0e 94 fd 14 	call	0x29fa	; 0x29fa <rotate>
}
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret

000029c8 <right>:

//storing the values of the current directions to attract the magnet towards it and rotate in CW direction
void right(uint8 angle)
{
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	0f 92       	push	r0
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	89 83       	std	Y+1, r24	; 0x01
	motor_steps[0]=12;
    29d4:	8c e0       	ldi	r24, 0x0C	; 12
    29d6:	80 93 96 00 	sts	0x0096, r24
	motor_steps[1]=6;
    29da:	86 e0       	ldi	r24, 0x06	; 6
    29dc:	80 93 97 00 	sts	0x0097, r24
	motor_steps[2]=3;
    29e0:	83 e0       	ldi	r24, 0x03	; 3
    29e2:	80 93 98 00 	sts	0x0098, r24
	motor_steps[3]=9;
    29e6:	89 e0       	ldi	r24, 0x09	; 9
    29e8:	80 93 99 00 	sts	0x0099, r24
	rotate(angle);
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	0e 94 fd 14 	call	0x29fa	; 0x29fa <rotate>
}
    29f2:	0f 90       	pop	r0
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <rotate>:

//the rotation function to store the values in the port and rotate the motor
void rotate(uint8 angle)
{
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	6e 97       	sbiw	r28, 0x1e	; 30
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 counter =1; // as both ACW and CW have the same value in the array to avoid any errors
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	8d 8f       	std	Y+29, r24	; 0x1d

	//start the motion
	PORTA = (motor_steps[0] & 0x0F) | (PORTA & 0xF0);
    2a14:	ab e3       	ldi	r26, 0x3B	; 59
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	80 91 96 00 	lds	r24, 0x0096
    2a1c:	98 2f       	mov	r25, r24
    2a1e:	9f 70       	andi	r25, 0x0F	; 15
    2a20:	eb e3       	ldi	r30, 0x3B	; 59
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	80 7f       	andi	r24, 0xF0	; 240
    2a28:	89 2b       	or	r24, r25
    2a2a:	8c 93       	st	X, r24
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	a0 ef       	ldi	r26, 0xF0	; 240
    2a32:	b1 e4       	ldi	r27, 0x41	; 65
    2a34:	89 8f       	std	Y+25, r24	; 0x19
    2a36:	9a 8f       	std	Y+26, r25	; 0x1a
    2a38:	ab 8f       	std	Y+27, r26	; 0x1b
    2a3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	4a e7       	ldi	r20, 0x7A	; 122
    2a4a:	53 e4       	ldi	r21, 0x43	; 67
    2a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	8d 8b       	std	Y+21, r24	; 0x15
    2a56:	9e 8b       	std	Y+22, r25	; 0x16
    2a58:	af 8b       	std	Y+23, r26	; 0x17
    2a5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a60:	8f 89       	ldd	r24, Y+23	; 0x17
    2a62:	98 8d       	ldd	r25, Y+24	; 0x18
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e8       	ldi	r20, 0x80	; 128
    2a6a:	5f e3       	ldi	r21, 0x3F	; 63
    2a6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a70:	88 23       	and	r24, r24
    2a72:	2c f4       	brge	.+10     	; 0x2a7e <rotate+0x84>
		__ticks = 1;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	9c 8b       	std	Y+20, r25	; 0x14
    2a7a:	8b 8b       	std	Y+19, r24	; 0x13
    2a7c:	3f c0       	rjmp	.+126    	; 0x2afc <rotate+0x102>
	else if (__tmp > 65535)
    2a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a80:	7e 89       	ldd	r23, Y+22	; 0x16
    2a82:	8f 89       	ldd	r24, Y+23	; 0x17
    2a84:	98 8d       	ldd	r25, Y+24	; 0x18
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	3f ef       	ldi	r19, 0xFF	; 255
    2a8a:	4f e7       	ldi	r20, 0x7F	; 127
    2a8c:	57 e4       	ldi	r21, 0x47	; 71
    2a8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a92:	18 16       	cp	r1, r24
    2a94:	4c f5       	brge	.+82     	; 0x2ae8 <rotate+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a96:	69 8d       	ldd	r22, Y+25	; 0x19
    2a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e2       	ldi	r20, 0x20	; 32
    2aa4:	51 e4       	ldi	r21, 0x41	; 65
    2aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	bc 01       	movw	r22, r24
    2ab0:	cd 01       	movw	r24, r26
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9c 8b       	std	Y+20, r25	; 0x14
    2abc:	8b 8b       	std	Y+19, r24	; 0x13
    2abe:	0f c0       	rjmp	.+30     	; 0x2ade <rotate+0xe4>
    2ac0:	89 e1       	ldi	r24, 0x19	; 25
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	9a 8b       	std	Y+18, r25	; 0x12
    2ac6:	89 8b       	std	Y+17, r24	; 0x11
    2ac8:	89 89       	ldd	r24, Y+17	; 0x11
    2aca:	9a 89       	ldd	r25, Y+18	; 0x12
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <rotate+0xd2>
    2ad0:	9a 8b       	std	Y+18, r25	; 0x12
    2ad2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	9c 8b       	std	Y+20, r25	; 0x14
    2adc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ade:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae2:	00 97       	sbiw	r24, 0x00	; 0
    2ae4:	69 f7       	brne	.-38     	; 0x2ac0 <rotate+0xc6>
    2ae6:	a4 c0       	rjmp	.+328    	; 0x2c30 <rotate+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    2aea:	7e 89       	ldd	r23, Y+22	; 0x16
    2aec:	8f 89       	ldd	r24, Y+23	; 0x17
    2aee:	98 8d       	ldd	r25, Y+24	; 0x18
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	9c 8b       	std	Y+20, r25	; 0x14
    2afa:	8b 8b       	std	Y+19, r24	; 0x13
    2afc:	8b 89       	ldd	r24, Y+19	; 0x13
    2afe:	9c 89       	ldd	r25, Y+20	; 0x14
    2b00:	98 8b       	std	Y+16, r25	; 0x10
    2b02:	8f 87       	std	Y+15, r24	; 0x0f
    2b04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b06:	98 89       	ldd	r25, Y+16	; 0x10
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	f1 f7       	brne	.-4      	; 0x2b08 <rotate+0x10e>
    2b0c:	98 8b       	std	Y+16, r25	; 0x10
    2b0e:	8f 87       	std	Y+15, r24	; 0x0f
    2b10:	8f c0       	rjmp	.+286    	; 0x2c30 <rotate+0x236>

	/*exit the loop when the angel count == angle required which indicate reaching the
	required angle */
	while (anglecount != angle)
	{
		PORTA = (motor_steps[counter] & 0x0F) | (PORTA & 0xF0);
    2b12:	ab e3       	ldi	r26, 0x3B	; 59
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b18:	88 2f       	mov	r24, r24
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	ea 56       	subi	r30, 0x6A	; 106
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	80 81       	ld	r24, Z
    2b24:	98 2f       	mov	r25, r24
    2b26:	9f 70       	andi	r25, 0x0F	; 15
    2b28:	eb e3       	ldi	r30, 0x3B	; 59
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	80 7f       	andi	r24, 0xF0	; 240
    2b30:	89 2b       	or	r24, r25
    2b32:	8c 93       	st	X, r24
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	a0 ef       	ldi	r26, 0xF0	; 240
    2b3a:	b1 e4       	ldi	r27, 0x41	; 65
    2b3c:	8b 87       	std	Y+11, r24	; 0x0b
    2b3e:	9c 87       	std	Y+12, r25	; 0x0c
    2b40:	ad 87       	std	Y+13, r26	; 0x0d
    2b42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	4a e7       	ldi	r20, 0x7A	; 122
    2b52:	53 e4       	ldi	r21, 0x43	; 67
    2b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	8f 83       	std	Y+7, r24	; 0x07
    2b5e:	98 87       	std	Y+8, r25	; 0x08
    2b60:	a9 87       	std	Y+9, r26	; 0x09
    2b62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b64:	6f 81       	ldd	r22, Y+7	; 0x07
    2b66:	78 85       	ldd	r23, Y+8	; 0x08
    2b68:	89 85       	ldd	r24, Y+9	; 0x09
    2b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e8       	ldi	r20, 0x80	; 128
    2b72:	5f e3       	ldi	r21, 0x3F	; 63
    2b74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b78:	88 23       	and	r24, r24
    2b7a:	2c f4       	brge	.+10     	; 0x2b86 <rotate+0x18c>
		__ticks = 1;
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	9e 83       	std	Y+6, r25	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
    2b84:	3f c0       	rjmp	.+126    	; 0x2c04 <rotate+0x20a>
	else if (__tmp > 65535)
    2b86:	6f 81       	ldd	r22, Y+7	; 0x07
    2b88:	78 85       	ldd	r23, Y+8	; 0x08
    2b8a:	89 85       	ldd	r24, Y+9	; 0x09
    2b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	3f ef       	ldi	r19, 0xFF	; 255
    2b92:	4f e7       	ldi	r20, 0x7F	; 127
    2b94:	57 e4       	ldi	r21, 0x47	; 71
    2b96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b9a:	18 16       	cp	r1, r24
    2b9c:	4c f5       	brge	.+82     	; 0x2bf0 <rotate+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	40 e2       	ldi	r20, 0x20	; 32
    2bac:	51 e4       	ldi	r21, 0x41	; 65
    2bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	bc 01       	movw	r22, r24
    2bb8:	cd 01       	movw	r24, r26
    2bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	9e 83       	std	Y+6, r25	; 0x06
    2bc4:	8d 83       	std	Y+5, r24	; 0x05
    2bc6:	0f c0       	rjmp	.+30     	; 0x2be6 <rotate+0x1ec>
    2bc8:	89 e1       	ldi	r24, 0x19	; 25
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	9c 83       	std	Y+4, r25	; 0x04
    2bce:	8b 83       	std	Y+3, r24	; 0x03
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <rotate+0x1da>
    2bd8:	9c 83       	std	Y+4, r25	; 0x04
    2bda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bde:	9e 81       	ldd	r25, Y+6	; 0x06
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	9e 83       	std	Y+6, r25	; 0x06
    2be4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be6:	8d 81       	ldd	r24, Y+5	; 0x05
    2be8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bea:	00 97       	sbiw	r24, 0x00	; 0
    2bec:	69 f7       	brne	.-38     	; 0x2bc8 <rotate+0x1ce>
    2bee:	14 c0       	rjmp	.+40     	; 0x2c18 <rotate+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf2:	78 85       	ldd	r23, Y+8	; 0x08
    2bf4:	89 85       	ldd	r24, Y+9	; 0x09
    2bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	9e 83       	std	Y+6, r25	; 0x06
    2c02:	8d 83       	std	Y+5, r24	; 0x05
    2c04:	8d 81       	ldd	r24, Y+5	; 0x05
    2c06:	9e 81       	ldd	r25, Y+6	; 0x06
    2c08:	9a 83       	std	Y+2, r25	; 0x02
    2c0a:	89 83       	std	Y+1, r24	; 0x01
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	f1 f7       	brne	.-4      	; 0x2c10 <rotate+0x216>
    2c14:	9a 83       	std	Y+2, r25	; 0x02
    2c16:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(30);
		counter++;
    2c18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c1a:	8f 5f       	subi	r24, 0xFF	; 255
    2c1c:	8d 8f       	std	Y+29, r24	; 0x1d
		if(counter == 4)
    2c1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c20:	84 30       	cpi	r24, 0x04	; 4
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <rotate+0x22c>
		{
			//start from the beginning after finish the full motor rotation.
			counter = 0;
    2c24:	1d 8e       	std	Y+29, r1	; 0x1d
		}
		anglecount++;
    2c26:	80 91 94 00 	lds	r24, 0x0094
    2c2a:	8f 5f       	subi	r24, 0xFF	; 255
    2c2c:	80 93 94 00 	sts	0x0094, r24
	PORTA = (motor_steps[0] & 0x0F) | (PORTA & 0xF0);
	_delay_ms(30);

	/*exit the loop when the angel count == angle required which indicate reaching the
	required angle */
	while (anglecount != angle)
    2c30:	90 91 94 00 	lds	r25, 0x0094
    2c34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c36:	98 17       	cp	r25, r24
    2c38:	09 f0       	breq	.+2      	; 0x2c3c <rotate+0x242>
    2c3a:	6b cf       	rjmp	.-298    	; 0x2b12 <rotate+0x118>
		}
		anglecount++;
	}

	//to solve an error we have to add another step
	PORTA = (motor_steps[counter] & 0x0F) | (PORTA & 0xF0);
    2c3c:	ab e3       	ldi	r26, 0x3B	; 59
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c42:	88 2f       	mov	r24, r24
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	fc 01       	movw	r30, r24
    2c48:	ea 56       	subi	r30, 0x6A	; 106
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	80 81       	ld	r24, Z
    2c4e:	98 2f       	mov	r25, r24
    2c50:	9f 70       	andi	r25, 0x0F	; 15
    2c52:	eb e3       	ldi	r30, 0x3B	; 59
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	80 81       	ld	r24, Z
    2c58:	80 7f       	andi	r24, 0xF0	; 240
    2c5a:	89 2b       	or	r24, r25
    2c5c:	8c 93       	st	X, r24
}
    2c5e:	6e 96       	adiw	r28, 0x1e	; 30
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	f8 94       	cli
    2c64:	de bf       	out	0x3e, r29	; 62
    2c66:	0f be       	out	0x3f, r0	; 63
    2c68:	cd bf       	out	0x3d, r28	; 61
    2c6a:	cf 91       	pop	r28
    2c6c:	df 91       	pop	r29
    2c6e:	08 95       	ret

00002c70 <__vector_7>:

uint8 sec=00;


ISR(TIMER1_COMPA_vect)
{
    2c70:	1f 92       	push	r1
    2c72:	0f 92       	push	r0
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	0f 92       	push	r0
    2c78:	11 24       	eor	r1, r1
    2c7a:	8f 93       	push	r24
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
	//increment the value of the variable sec each time the timer fire the ISR
	sec++;
    2c84:	80 91 95 00 	lds	r24, 0x0095
    2c88:	8f 5f       	subi	r24, 0xFF	; 255
    2c8a:	80 93 95 00 	sts	0x0095, r24

}
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	8f 91       	pop	r24
    2c94:	0f 90       	pop	r0
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	0f 90       	pop	r0
    2c9a:	1f 90       	pop	r1
    2c9c:	18 95       	reti

00002c9e <Timer1_Init>:

void Timer1_Init(void)
{
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;		/* Set timer1 initial count to zero */
    2ca6:	ec e4       	ldi	r30, 0x4C	; 76
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	11 82       	std	Z+1, r1	; 0x01
    2cac:	10 82       	st	Z, r1

	OCR1A = 15625;    /* Set the Compare value to 15625 ((1MHz/64 = 15625 ) represent the number of ticks in one second */
    2cae:	ea e4       	ldi	r30, 0x4A	; 74
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	89 e0       	ldi	r24, 0x09	; 9
    2cb4:	9d e3       	ldi	r25, 0x3D	; 61
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	80 83       	st	Z, r24

	TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    2cba:	a9 e5       	ldi	r26, 0x59	; 89
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e9 e5       	ldi	r30, 0x59	; 89
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	80 61       	ori	r24, 0x10	; 16
    2cc6:	8c 93       	st	X, r24
	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=0 (Non-PWM)
	 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
	 */
	TCCR1A = (1<<FOC1A);
    2cc8:	ef e4       	ldi	r30, 0x4F	; 79
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	88 e0       	ldi	r24, 0x08	; 8
    2cce:	80 83       	st	Z, r24
	/* Configure timer control register TCCR1B
	 * 1. Non PWM mode FOC =0
	 * 2. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
	 * 3. Prescaler = F_CPU/64 CS10=1 CS11=1 CS12=0
	 */
	TCCR1B = (1<<WGM12) | (1<<CS11) | (1<<CS10);
    2cd0:	ee e4       	ldi	r30, 0x4E	; 78
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	8b e0       	ldi	r24, 0x0B	; 11
    2cd6:	80 83       	st	Z, r24
}
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	08 95       	ret

00002cde <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <UART_init+0x6>
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <UART_init+0x8>
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	9c 83       	std	Y+4, r25	; 0x04
    2cec:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2cee:	1a 82       	std	Y+2, r1	; 0x02
    2cf0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2cf2:	eb e2       	ldi	r30, 0x2B	; 43
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	82 e0       	ldi	r24, 0x02	; 2
    2cf8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2cfa:	ea e2       	ldi	r30, 0x2A	; 42
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	88 e1       	ldi	r24, 0x18	; 24
    2d00:	80 83       	st	Z, r24
	 * UPM1:0  = based on the parity mode chosen in the configuration
	 * USBS    = 0 One stop bit or 1 for 2 stop bits
	 * UCSZ1:0 = based on number of bits chosen in the configuration
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= (1<<URSEL) ;
    2d02:	a0 e4       	ldi	r26, 0x40	; 64
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	e0 e4       	ldi	r30, 0x40	; 64
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	80 68       	ori	r24, 0x80	; 128
    2d0e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity_mode)<<4 );
    2d10:	a0 e4       	ldi	r26, 0x40	; 64
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	e0 e4       	ldi	r30, 0x40	; 64
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	28 2f       	mov	r18, r24
    2d1c:	2f 7c       	andi	r18, 0xCF	; 207
    2d1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d20:	fc 81       	ldd	r31, Y+4	; 0x04
    2d22:	81 81       	ldd	r24, Z+1	; 0x01
    2d24:	88 2f       	mov	r24, r24
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	82 95       	swap	r24
    2d2a:	92 95       	swap	r25
    2d2c:	90 7f       	andi	r25, 0xF0	; 240
    2d2e:	98 27       	eor	r25, r24
    2d30:	80 7f       	andi	r24, 0xF0	; 240
    2d32:	98 27       	eor	r25, r24
    2d34:	82 2b       	or	r24, r18
    2d36:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bits)<< 3);
    2d38:	a0 e4       	ldi	r26, 0x40	; 64
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	e0 e4       	ldi	r30, 0x40	; 64
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	28 2f       	mov	r18, r24
    2d44:	27 7f       	andi	r18, 0xF7	; 247
    2d46:	eb 81       	ldd	r30, Y+3	; 0x03
    2d48:	fc 81       	ldd	r31, Y+4	; 0x04
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	88 2f       	mov	r24, r24
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	82 2b       	or	r24, r18
    2d5e:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ( ( (Config_Ptr->character_size)<< 1) & 0x06);
    2d60:	a0 e4       	ldi	r26, 0x40	; 64
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e0 e4       	ldi	r30, 0x40	; 64
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	29 7f       	andi	r18, 0xF9	; 249
    2d6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d70:	fc 81       	ldd	r31, Y+4	; 0x04
    2d72:	80 81       	ld	r24, Z
    2d74:	88 2f       	mov	r24, r24
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	88 0f       	add	r24, r24
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	86 70       	andi	r24, 0x06	; 6
    2d7e:	82 2b       	or	r24, r18
    2d80:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | ( (Config_Ptr->character_size) & 0x04);
    2d82:	aa e2       	ldi	r26, 0x2A	; 42
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	ea e2       	ldi	r30, 0x2A	; 42
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	98 2f       	mov	r25, r24
    2d8e:	9b 7f       	andi	r25, 0xFB	; 251
    2d90:	eb 81       	ldd	r30, Y+3	; 0x03
    2d92:	fc 81       	ldd	r31, Y+4	; 0x04
    2d94:	80 81       	ld	r24, Z
    2d96:	84 70       	andi	r24, 0x04	; 4
    2d98:	89 2b       	or	r24, r25
    2d9a:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->Baud_Rate * 8UL))) - 1);
    2d9c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d9e:	fc 81       	ldd	r31, Y+4	; 0x04
    2da0:	83 81       	ldd	r24, Z+3	; 0x03
    2da2:	94 81       	ldd	r25, Z+4	; 0x04
    2da4:	a5 81       	ldd	r26, Z+5	; 0x05
    2da6:	b6 81       	ldd	r27, Z+6	; 0x06
    2da8:	88 0f       	add	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	aa 1f       	adc	r26, r26
    2dae:	bb 1f       	adc	r27, r27
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	aa 1f       	adc	r26, r26
    2db6:	bb 1f       	adc	r27, r27
    2db8:	88 0f       	add	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	aa 1f       	adc	r26, r26
    2dbe:	bb 1f       	adc	r27, r27
    2dc0:	9c 01       	movw	r18, r24
    2dc2:	ad 01       	movw	r20, r26
    2dc4:	80 e4       	ldi	r24, 0x40	; 64
    2dc6:	92 e4       	ldi	r25, 0x42	; 66
    2dc8:	af e0       	ldi	r26, 0x0F	; 15
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__udivmodsi4>
    2dd4:	da 01       	movw	r26, r20
    2dd6:	c9 01       	movw	r24, r18
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	9a 83       	std	Y+2, r25	; 0x02
    2ddc:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2dde:	e0 e4       	ldi	r30, 0x40	; 64
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	9a 81       	ldd	r25, Y+2	; 0x02
    2de6:	89 2f       	mov	r24, r25
    2de8:	99 27       	eor	r25, r25
    2dea:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2dec:	e9 e2       	ldi	r30, 0x29	; 41
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	80 83       	st	Z, r24
}
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	0f 92       	push	r0
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2e0e:	eb e2       	ldi	r30, 0x2B	; 43
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	88 2f       	mov	r24, r24
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	80 72       	andi	r24, 0x20	; 32
    2e1a:	90 70       	andi	r25, 0x00	; 0
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	b9 f3       	breq	.-18     	; 0x2e0e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2e20:	ec e2       	ldi	r30, 0x2C	; 44
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2e28:	0f 90       	pop	r0
    2e2a:	cf 91       	pop	r28
    2e2c:	df 91       	pop	r29
    2e2e:	08 95       	ret

00002e30 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2e30:	df 93       	push	r29
    2e32:	cf 93       	push	r28
    2e34:	cd b7       	in	r28, 0x3d	; 61
    2e36:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2e38:	eb e2       	ldi	r30, 0x2B	; 43
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	88 23       	and	r24, r24
    2e40:	dc f7       	brge	.-10     	; 0x2e38 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2e42:	ec e2       	ldi	r30, 0x2C	; 44
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
}
    2e48:	cf 91       	pop	r28
    2e4a:	df 91       	pop	r29
    2e4c:	08 95       	ret

00002e4e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2e4e:	df 93       	push	r29
    2e50:	cf 93       	push	r28
    2e52:	00 d0       	rcall	.+0      	; 0x2e54 <UART_sendString+0x6>
    2e54:	0f 92       	push	r0
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	9b 83       	std	Y+3, r25	; 0x03
    2e5c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e5e:	19 82       	std	Y+1, r1	; 0x01
    2e60:	0e c0       	rjmp	.+28     	; 0x2e7e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	28 2f       	mov	r18, r24
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	e2 0f       	add	r30, r18
    2e70:	f3 1f       	adc	r31, r19
    2e72:	80 81       	ld	r24, Z
    2e74:	0e 94 01 17 	call	0x2e02	; 0x2e02 <UART_sendByte>
		i++;
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	8f 5f       	subi	r24, 0xFF	; 255
    2e7c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	28 2f       	mov	r18, r24
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	8a 81       	ldd	r24, Y+2	; 0x02
    2e86:	9b 81       	ldd	r25, Y+3	; 0x03
    2e88:	fc 01       	movw	r30, r24
    2e8a:	e2 0f       	add	r30, r18
    2e8c:	f3 1f       	adc	r31, r19
    2e8e:	80 81       	ld	r24, Z
    2e90:	88 23       	and	r24, r24
    2e92:	39 f7       	brne	.-50     	; 0x2e62 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	cf 91       	pop	r28
    2e9c:	df 91       	pop	r29
    2e9e:	08 95       	ret

00002ea0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the 'E' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2ea0:	0f 93       	push	r16
    2ea2:	1f 93       	push	r17
    2ea4:	df 93       	push	r29
    2ea6:	cf 93       	push	r28
    2ea8:	00 d0       	rcall	.+0      	; 0x2eaa <UART_receiveString+0xa>
    2eaa:	0f 92       	push	r0
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
    2eb0:	9b 83       	std	Y+3, r25	; 0x03
    2eb2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2eb4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	28 2f       	mov	r18, r24
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec0:	8c 01       	movw	r16, r24
    2ec2:	02 0f       	add	r16, r18
    2ec4:	13 1f       	adc	r17, r19
    2ec6:	0e 94 18 17 	call	0x2e30	; 0x2e30 <UART_recieveByte>
    2eca:	f8 01       	movw	r30, r16
    2ecc:	80 83       	st	Z, r24
    2ece:	0f c0       	rjmp	.+30     	; 0x2eee <UART_receiveString+0x4e>

	/* Receive the whole string until the 'E' */
	while(Str[i] != 'E')
	{
		i++;
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	8f 5f       	subi	r24, 0xFF	; 255
    2ed4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	28 2f       	mov	r18, r24
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ede:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee0:	8c 01       	movw	r16, r24
    2ee2:	02 0f       	add	r16, r18
    2ee4:	13 1f       	adc	r17, r19
    2ee6:	0e 94 18 17 	call	0x2e30	; 0x2e30 <UART_recieveByte>
    2eea:	f8 01       	movw	r30, r16
    2eec:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the 'E' */
	while(Str[i] != 'E')
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	28 2f       	mov	r18, r24
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef8:	fc 01       	movw	r30, r24
    2efa:	e2 0f       	add	r30, r18
    2efc:	f3 1f       	adc	r31, r19
    2efe:	80 81       	ld	r24, Z
    2f00:	85 34       	cpi	r24, 0x45	; 69
    2f02:	31 f7       	brne	.-52     	; 0x2ed0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}


}
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	cf 91       	pop	r28
    2f0c:	df 91       	pop	r29
    2f0e:	1f 91       	pop	r17
    2f10:	0f 91       	pop	r16
    2f12:	08 95       	ret

00002f14 <__udivmodsi4>:
    2f14:	a1 e2       	ldi	r26, 0x21	; 33
    2f16:	1a 2e       	mov	r1, r26
    2f18:	aa 1b       	sub	r26, r26
    2f1a:	bb 1b       	sub	r27, r27
    2f1c:	fd 01       	movw	r30, r26
    2f1e:	0d c0       	rjmp	.+26     	; 0x2f3a <__udivmodsi4_ep>

00002f20 <__udivmodsi4_loop>:
    2f20:	aa 1f       	adc	r26, r26
    2f22:	bb 1f       	adc	r27, r27
    2f24:	ee 1f       	adc	r30, r30
    2f26:	ff 1f       	adc	r31, r31
    2f28:	a2 17       	cp	r26, r18
    2f2a:	b3 07       	cpc	r27, r19
    2f2c:	e4 07       	cpc	r30, r20
    2f2e:	f5 07       	cpc	r31, r21
    2f30:	20 f0       	brcs	.+8      	; 0x2f3a <__udivmodsi4_ep>
    2f32:	a2 1b       	sub	r26, r18
    2f34:	b3 0b       	sbc	r27, r19
    2f36:	e4 0b       	sbc	r30, r20
    2f38:	f5 0b       	sbc	r31, r21

00002f3a <__udivmodsi4_ep>:
    2f3a:	66 1f       	adc	r22, r22
    2f3c:	77 1f       	adc	r23, r23
    2f3e:	88 1f       	adc	r24, r24
    2f40:	99 1f       	adc	r25, r25
    2f42:	1a 94       	dec	r1
    2f44:	69 f7       	brne	.-38     	; 0x2f20 <__udivmodsi4_loop>
    2f46:	60 95       	com	r22
    2f48:	70 95       	com	r23
    2f4a:	80 95       	com	r24
    2f4c:	90 95       	com	r25
    2f4e:	9b 01       	movw	r18, r22
    2f50:	ac 01       	movw	r20, r24
    2f52:	bd 01       	movw	r22, r26
    2f54:	cf 01       	movw	r24, r30
    2f56:	08 95       	ret

00002f58 <__prologue_saves__>:
    2f58:	2f 92       	push	r2
    2f5a:	3f 92       	push	r3
    2f5c:	4f 92       	push	r4
    2f5e:	5f 92       	push	r5
    2f60:	6f 92       	push	r6
    2f62:	7f 92       	push	r7
    2f64:	8f 92       	push	r8
    2f66:	9f 92       	push	r9
    2f68:	af 92       	push	r10
    2f6a:	bf 92       	push	r11
    2f6c:	cf 92       	push	r12
    2f6e:	df 92       	push	r13
    2f70:	ef 92       	push	r14
    2f72:	ff 92       	push	r15
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	ca 1b       	sub	r28, r26
    2f82:	db 0b       	sbc	r29, r27
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
    2f8e:	09 94       	ijmp

00002f90 <__epilogue_restores__>:
    2f90:	2a 88       	ldd	r2, Y+18	; 0x12
    2f92:	39 88       	ldd	r3, Y+17	; 0x11
    2f94:	48 88       	ldd	r4, Y+16	; 0x10
    2f96:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f98:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fa0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fa2:	b9 84       	ldd	r11, Y+9	; 0x09
    2fa4:	c8 84       	ldd	r12, Y+8	; 0x08
    2fa6:	df 80       	ldd	r13, Y+7	; 0x07
    2fa8:	ee 80       	ldd	r14, Y+6	; 0x06
    2faa:	fd 80       	ldd	r15, Y+5	; 0x05
    2fac:	0c 81       	ldd	r16, Y+4	; 0x04
    2fae:	1b 81       	ldd	r17, Y+3	; 0x03
    2fb0:	aa 81       	ldd	r26, Y+2	; 0x02
    2fb2:	b9 81       	ldd	r27, Y+1	; 0x01
    2fb4:	ce 0f       	add	r28, r30
    2fb6:	d1 1d       	adc	r29, r1
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	de bf       	out	0x3e, r29	; 62
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	cd bf       	out	0x3d, r28	; 61
    2fc2:	ed 01       	movw	r28, r26
    2fc4:	08 95       	ret

00002fc6 <itoa>:
    2fc6:	fb 01       	movw	r30, r22
    2fc8:	9f 01       	movw	r18, r30
    2fca:	e8 94       	clt
    2fcc:	42 30       	cpi	r20, 0x02	; 2
    2fce:	c4 f0       	brlt	.+48     	; 0x3000 <itoa+0x3a>
    2fd0:	45 32       	cpi	r20, 0x25	; 37
    2fd2:	b4 f4       	brge	.+44     	; 0x3000 <itoa+0x3a>
    2fd4:	4a 30       	cpi	r20, 0x0A	; 10
    2fd6:	29 f4       	brne	.+10     	; 0x2fe2 <itoa+0x1c>
    2fd8:	97 fb       	bst	r25, 7
    2fda:	1e f4       	brtc	.+6      	; 0x2fe2 <itoa+0x1c>
    2fdc:	90 95       	com	r25
    2fde:	81 95       	neg	r24
    2fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe2:	64 2f       	mov	r22, r20
    2fe4:	77 27       	eor	r23, r23
    2fe6:	0e 94 14 18 	call	0x3028	; 0x3028 <__udivmodhi4>
    2fea:	80 5d       	subi	r24, 0xD0	; 208
    2fec:	8a 33       	cpi	r24, 0x3A	; 58
    2fee:	0c f0       	brlt	.+2      	; 0x2ff2 <itoa+0x2c>
    2ff0:	89 5d       	subi	r24, 0xD9	; 217
    2ff2:	81 93       	st	Z+, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	a1 f7       	brne	.-24     	; 0x2fe2 <itoa+0x1c>
    2ffa:	16 f4       	brtc	.+4      	; 0x3000 <itoa+0x3a>
    2ffc:	5d e2       	ldi	r21, 0x2D	; 45
    2ffe:	51 93       	st	Z+, r21
    3000:	10 82       	st	Z, r1
    3002:	c9 01       	movw	r24, r18
    3004:	0c 94 04 18 	jmp	0x3008	; 0x3008 <strrev>

00003008 <strrev>:
    3008:	dc 01       	movw	r26, r24
    300a:	fc 01       	movw	r30, r24
    300c:	67 2f       	mov	r22, r23
    300e:	71 91       	ld	r23, Z+
    3010:	77 23       	and	r23, r23
    3012:	e1 f7       	brne	.-8      	; 0x300c <strrev+0x4>
    3014:	32 97       	sbiw	r30, 0x02	; 2
    3016:	04 c0       	rjmp	.+8      	; 0x3020 <strrev+0x18>
    3018:	7c 91       	ld	r23, X
    301a:	6d 93       	st	X+, r22
    301c:	70 83       	st	Z, r23
    301e:	62 91       	ld	r22, -Z
    3020:	ae 17       	cp	r26, r30
    3022:	bf 07       	cpc	r27, r31
    3024:	c8 f3       	brcs	.-14     	; 0x3018 <strrev+0x10>
    3026:	08 95       	ret

00003028 <__udivmodhi4>:
    3028:	aa 1b       	sub	r26, r26
    302a:	bb 1b       	sub	r27, r27
    302c:	51 e1       	ldi	r21, 0x11	; 17
    302e:	07 c0       	rjmp	.+14     	; 0x303e <__udivmodhi4_ep>

00003030 <__udivmodhi4_loop>:
    3030:	aa 1f       	adc	r26, r26
    3032:	bb 1f       	adc	r27, r27
    3034:	a6 17       	cp	r26, r22
    3036:	b7 07       	cpc	r27, r23
    3038:	10 f0       	brcs	.+4      	; 0x303e <__udivmodhi4_ep>
    303a:	a6 1b       	sub	r26, r22
    303c:	b7 0b       	sbc	r27, r23

0000303e <__udivmodhi4_ep>:
    303e:	88 1f       	adc	r24, r24
    3040:	99 1f       	adc	r25, r25
    3042:	5a 95       	dec	r21
    3044:	a9 f7       	brne	.-22     	; 0x3030 <__udivmodhi4_loop>
    3046:	80 95       	com	r24
    3048:	90 95       	com	r25
    304a:	bc 01       	movw	r22, r24
    304c:	cd 01       	movw	r24, r26
    304e:	08 95       	ret

00003050 <_exit>:
    3050:	f8 94       	cli

00003052 <__stop_program>:
    3052:	ff cf       	rjmp	.-2      	; 0x3052 <__stop_program>
